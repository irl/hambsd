Summary: iclcd(8): identify compliant with license conditions
---
Index: src/usr.sbin/iclcd/Makefile
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/Makefile
@@ -0,0 +1,9 @@
+#	$OpenBSD: Makefile,v 1.8 2015/03/11 14:59:04 deraadt Exp $
+
+PROG=	iclcd
+SRCS=	iclcd.c
+MAN=	heard.5 iclcd.8
+
+LDADD=  -lpthread
+
+.include <bsd.prog.mk>
Index: src/usr.sbin/iclcd/iclcd.8
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/iclcd.8
@@ -0,0 +1,81 @@
+.Dd October 7, 2019
+.Dt ICLCD 8
+.Os
+.Sh NAME
+.Nm iclcd
+.Nd identification compliant with license conditions daemon
+.Sh SYNOPSIS
+.Nm
+.Op Fl Dn
+.Op Fl i Ar interface
+.Op Fl p Ar period
+.Sh DESCRIPTION
+.Nm
+sends
+.Em hamdex
+identification frames using the system default callsign, see
+.Xr mycallsign 5 .
+It will also listen for identification frames on the specified
+interface and record information heard in the
+.Xr heard 5
+database.
+.Pp
+In normal operation,
+.Nm
+forks a copy of itself and runs in the background.
+Anomolies and errors are reported via
+.Xr syslog 3 .
+.Pp
+.Nm
+is usually started at boot time, and can be enabled by
+setting the following in
+.Pa /etc/rc.conf.local :
+.Pp
+.Dl iclcd_flags=\&"\&"
+.Pp
+See
+.Xr rc 8
+and
+.Xr rc.conf 8
+for more information on the boot process
+and enabling daemons.
+.Pp
+The options are as follows:
+.Bl -tag -width Ds
+.It Fl D
+Do not daemonize.
+.It Fl n
+Do not send beacons, only listen.
+.It Fl i Ar interface
+Interface name to broadcast ident frames (default: ekiss0).
+.It Fl p Ar period
+Period in seconds between broadcasts (default: 60).
+.El
+.Sh FILES
+.Bl -tag -width /etc/mycallsign -compact
+.It Pa /etc/mycallsign
+System default callsign
+.It Pa /var/db/heard
+Heard stations database
+.El
+.Sh SEE ALSO
+.Xr heard 1 ,
+.Xr ekiss 4 ,
+.Xr heard 5 ,
+.Xr mycallsign 5 ,
+.Xr hamdex 7
+.Sh AUTHORS
+The
+.Nm
+daemon was written for the HamBSD project by
+.An Iain R. Learmonth Aq Mt irl@fsfe.org
+for the public domain.
+.Sh CAVEATS
+It is not currently possible to broadcast identification on multiple interfaces,
+or listen for broadcasts on multiple interfaces.
+It is also required that identification transmit and receive must be on the
+same interface.
+.Sh DISCLAIMER
+This may not be enough to comply with your local laws regarding identification
+of amateur radio transmissions.
+This manual page is not legal advice.
Index: src/usr.sbin/iclcd/iclcd.c
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/iclcd.c
@@ -0,0 +1,458 @@
+/*
+ * iclcd - intentification compliant with license conditions daemon
+ *
+ * Written by Iain R. Learmonth <irl@fsfe.org> for the public domain.
+ */
+
+/*
+ * TODO:
+ *
+ *  * a non-privileged utility to read the heard stations file
+ *  * don't use threads, split up into two processes instead and
+ *    have specific pledges
+ *  * helper functions for logging errors, warnings, with format
+ *    strings
+ *  * store flags as they are received
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <syslog.h>
+#include <stdarg.h>
+#include <signal.h>
+#include <pthread.h>
+#include <errno.h>
+#include <time.h>
+
+#include <sys/queue.h>
+#include <sys/times.h>
+#include <sys/time.h>
+#include <sys/ioctl.h>
+#include <net/bpf.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <netinet/in.h>
+#include <netinet/if_ether.h>
+
+#include "iclc.h"
+
+static __dead void	 fatal(char *);
+static __dead void	 usage(void);
+static void		 signal_handler(int sig);
+static char		*read_mycallsign(void);
+static int		 iclc_compose(char *, char *);
+static int		 iclc_open(char *);
+static void		 daemonize();
+static void		 format_mac();
+static void		 iclc_write_text_entry(FILE *, struct iclc_ident *);
+static void		 iclc_update(u_char *);
+static int		 iclc_verify(u_char *);
+static void		 iclc_listen_loop(int, int);
+static void		*iclc_beacon_loop(void *);
+
+struct iclc_beacon_attrs {
+	char	*call;   /* callsign as ascii text */
+	char	*device; /* interface name */
+	int	 bpf;    /* bpf file handle */
+	int	 period; /* beacon period */
+};
+
+static struct bpf_insn insns[] = {
+	/* Check EtherType */
+	BPF_STMT(BPF_LD | BPF_H | BPF_ABS, 12),
+	BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0x88B5, 0, 3),
+	/* Check HAMDEX SubType */
+	BPF_STMT(BPF_LD | BPF_B | BPF_ABS, 15),
+	BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0, 0, 1),
+	BPF_STMT(BPF_RET | BPF_K, (u_int)-1),
+	BPF_STMT(BPF_RET | BPF_K, 0),
+};
+
+static struct bpf_program filter = {
+	sizeof insns / sizeof(insns[0]),
+	insns
+};
+
+static __dead void
+fatal(char* msg)
+{
+	syslog(LOG_DAEMON | LOG_EMERG,
+	    "iclcd hit fatal error; you might want to turn off your radio");
+	syslog(LOG_DAEMON | LOG_ERR,
+	    "%s", msg);
+	exit(1);
+}
+
+static __dead void
+usage(void)
+{
+	extern char *__progname;
+
+	fprintf(stderr, "usage: %s [-Dn] [-i interface] [-p period]\n",
+	    __progname);
+	exit(1);
+}
+
+static void
+signal_handler(int sig)
+{
+	switch(sig) {
+	case SIGHUP:
+		syslog(LOG_DAEMON | LOG_INFO, "caught hangup signal");
+		break;
+	case SIGTERM:
+		syslog(LOG_DAEMON | LOG_EMERG,
+		    "caught terminate signal, shutting down");
+		exit(0);
+		break;
+	}
+}
+
+static char *
+read_mycallsign(void)
+{
+	FILE    *mcp;
+	char    *call, *nl;
+	size_t  callsize = 0;
+	ssize_t calllen;
+
+	call = NULL;
+
+	if ((mcp = fopen("/etc/mycallsign", "r")) == NULL)
+		fatal("could not open /etc/mycallsign");
+	if ((calllen = getline(&call, &callsize, mcp)) != -1) {
+		if ((nl = strchr(call, '\n')) != NULL)
+			nl[0] = '\0';
+		return call;
+	}
+	fatal("could not read callsign from /etc/mycallsign");
+}
+
+/*
+ * Composes an Ethernet frame in "buf" to beacon the
+ * station identification using the callsign in "call"
+ * according to version 0 identification frames of the
+ * hamdex(7) protocol. buf must be at least 60 bytes in
+ * size. The length of the composed frame is returned.
+ */
+int
+iclc_compose(char *buf, char *call)
+{
+	struct iclc_ident_frame_hdr *frp;
+
+	const char hdr[] = {
+	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // broadcast destination (6 bytes)
+	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // source filled by bpf (6 bytes)
+	  0x88, 0xB5,                         // ethertype (2 bytes)
+	  0x00,                               // subtype (1 byte)
+	  0x00,                               // version (1 byte)
+	  0x00,                               // flags (1 byte)
+	  0x00,                               // callsign length (1 byte)
+	};
+
+	/* copy header to buf */
+	memcpy(buf, hdr, sizeof(hdr));
+
+	/* copy callsign to buf */
+	frp = (struct iclc_ident_frame_hdr *)buf;
+	frp->fr_calllen = strlen(call);
+	if (frp->fr_calllen > ICLC_MAXCALL) {
+		fatal("callsign in /etc/mycallsign too long");
+	}
+	memcpy(&frp->fr_call, call, frp->fr_calllen);
+
+	return sizeof(hdr) + frp->fr_calllen;
+}
+
+/*
+ * Open a BPF file and attach it to the interface named 'device'.
+ * Set immediate mode, check it is an Ethernet interface, and set a
+ * filter that only accepts iclc frames.
+ */
+int
+iclc_open(char *device)
+{
+	int bpf, immediate, iflen;
+	struct ifreq bound_if;
+	u_int dlt;
+
+	if ((bpf = open("/dev/bpf", O_RDWR)) == -1)
+		fatal("/dev/bpf failed to open");
+
+	/* Set immediate mode to process packets as they arrive. */
+	immediate = 1;
+	if (ioctl(bpf, BIOCIMMEDIATE, &immediate) == -1)
+		fatal("failed to set immediate mode");
+
+	/* Bind the network interface. */
+	iflen = strlen(device);
+	if (strlcpy(bound_if.ifr_name, device, sizeof(bound_if.ifr_name))
+	    < iflen)
+		fatal("interface name too long");
+	if(ioctl(bpf, BIOCSETIF, (caddr_t)&bound_if) == -1)
+		fatal("could not bind to interface");
+
+	/* Check the data link layer is Ethernet. */
+	if (ioctl(bpf, BIOCGDLT, (caddr_t)&dlt) == -1)
+		fatal("failed to get data link type");
+	if (dlt != DLT_EN10MB)
+		fatal("interface is not an ethernet");
+
+	/* Set filter program. */
+	if (ioctl(bpf, BIOCSETF, (caddr_t)&filter) == -1)
+		fatal("failed to set bpf filter");
+
+	return bpf;
+}
+
+static void
+daemonize()
+{
+	int i;
+	i = daemon(0, 0);
+	signal(SIGCHLD, SIG_IGN); /* ignore child */
+	signal(SIGTSTP, SIG_IGN); /* ignore tty signals */
+	signal(SIGTTOU, SIG_IGN);
+	signal(SIGTTIN, SIG_IGN);
+	signal(SIGHUP, signal_handler); /* catch hangup signal */
+	signal(SIGTERM, signal_handler); /* catch kill signal */
+}
+
+static void *
+iclc_beacon_loop(void *arguments)
+{
+	struct iclc_beacon_attrs *attrs = (struct iclc_beacon_attrs *)arguments;
+	char framebuf[sizeof(struct iclc_ident_frame_hdr) + ICLC_MAXCALL];
+	int framelen;
+	int unslept;
+
+	framelen = iclc_compose(framebuf, attrs->call);
+
+	syslog(LOG_DAEMON | LOG_INFO,
+	    "started up beacon thread (interface %s, callsign: %s)", attrs->device, attrs->call);
+
+	for (;;) {
+		if (write(attrs->bpf, &framebuf, framelen) != framelen) {
+			syslog(LOG_DAEMON | LOG_EMERG,
+			    "failed to send ident frame, might want to unplug");
+			syslog(LOG_DAEMON | LOG_ERR,
+			    "failure reason: %m");
+		}
+		unslept = attrs->period;
+		while (unslept > 0)
+			unslept = sleep(unslept);
+	}
+}
+
+/*
+ * Formats a MAC address as a colon-seperated lowercase hex string.
+ * Callers must ensure the buffer is at least 18 bytes in size.
+ */
+static void
+format_mac(char *buf, struct ether_addr *eap)
+{
+	sprintf(buf, "%02x:%02x:%02x:%02x:%02x:%02x",
+	    eap->ether_addr_octet[0],
+	    eap->ether_addr_octet[1],
+	    eap->ether_addr_octet[2],
+	    eap->ether_addr_octet[3],
+	    eap->ether_addr_octet[4],
+	    eap->ether_addr_octet[5]);
+}
+
+static void
+iclc_write_text_entry(FILE* hh, struct iclc_ident *idp)
+{
+	char source_addr[18];
+	format_mac(source_addr, &idp->hwaddr);
+	if (fprintf(hh, "%s\t%s\t%d\t%lld\t%lld\n",
+	    source_addr,idp->call, idp->flags, idp->first_heard,
+	    idp->last_heard) < 0) {
+		fatal("failed to write an entry to the heard stations file");
+	}
+}
+
+/*
+ * Update the heard stations with data from received frame. This updates
+ * internal state and also the /var/db/heard file.
+ */
+static void
+iclc_update(u_char *buf)
+{
+	struct iclc_ident_frame_hdr *frp;
+	struct iclc_ident *idp;
+	FILE *hh;
+	char source_addr[18];
+	int updated = 0;
+
+	frp = (struct iclc_ident_frame_hdr *)buf;
+	format_mac(source_addr, &frp->fr_shost);
+
+	syslog(LOG_DAEMON | LOG_INFO, "updated callsign: %s from mac: %s",
+	    (char *)(&buf[16]),
+	    source_addr);
+
+	hh = fopen("/var/db/heard", "w");
+	if (hh == NULL) {
+		fatal("error opening /var/db/heard");
+	}
+
+	SLIST_FOREACH(idp, &iclc_idents, entries) {
+		if (!updated && memcmp(&idp->hwaddr, &frp->fr_shost, 6) == 0) {
+			memcpy(idp->call, &frp->fr_call, frp->fr_calllen);
+			idp->last_heard = time(NULL);
+			updated = 1;
+		}
+		iclc_write_text_entry(hh, idp);
+	}
+
+	if (!updated) {
+		/* this one is new */
+		idp = malloc(sizeof(struct iclc_ident));
+		memcpy(&idp->hwaddr, &frp->fr_shost, 6);
+		memcpy(&idp->call, &frp->fr_call, frp->fr_calllen);
+		idp->first_heard = idp->last_heard = time(NULL);
+		SLIST_INSERT_HEAD(&iclc_idents, idp, entries);
+		iclc_write_text_entry(hh, idp);
+	}
+
+	fclose(hh);
+}
+
+/*
+ * Verifies a packet looks sane and isn't going to be a trouble maker.
+ * It is assumed that the packet has already had the EtherType and
+ * HAMDEX SubType checked (probably by BPF filter). It is also assumed
+ * that buf is at least 60 bytes in size.
+ */
+static int
+iclc_verify(u_char *buf)
+{
+	int i;
+	struct iclc_ident_frame_hdr *frp;
+	frp = (struct iclc_ident_frame_hdr *)buf;
+
+	/* check version */
+	if (frp->fr_version != 0) {
+		syslog(LOG_DAEMON | LOG_WARNING,
+		    "rejecting a frame for unknown protocol version");
+		return 0;
+	}
+
+	/* check callsign length */
+	if (frp->fr_calllen == 0 || frp->fr_calllen > ICLC_MAXCALL) {
+		syslog(LOG_DAEMON | LOG_WARNING,
+		    "rejecting a frame for invalid callsign length");
+		return 0;
+	}
+
+	/* check chars are printable */
+	for (i = 18; i < 18 + frp->fr_calllen; i++) {
+		if (buf[i] < 0x20 || buf[i] > 0xfe) {
+			syslog(LOG_DAEMON | LOG_WARNING,
+			    "rejecting a frame for non-printable characters");
+			return 0;
+		}
+	}
+
+	return 1;
+}
+
+static void
+iclc_listen_loop(int bpf, int rbufsize)
+{
+	int cc;
+	u_char *rbuf, *bp, *ep;
+
+	rbuf = malloc(rbufsize);
+	SLIST_INIT(&iclc_idents);
+
+	for (;;) {
+		cc = read(bpf, rbuf, rbufsize);
+		if (cc == -1 && errno == EINTR)
+			continue;
+		if (cc == -1)
+			fatal("read error");
+		bp = rbuf;
+		ep = bp + cc;
+		while (bp < ep) {
+#define caplen ((struct bpf_hdr *)bp)->bh_caplen
+#define hdrlen ((struct bpf_hdr *)bp)->bh_hdrlen
+			if (iclc_verify(bp+hdrlen))
+				iclc_update(bp + hdrlen);
+			bp += BPF_WORDALIGN(hdrlen + caplen);
+		}
+	}
+}
+
+int
+main(int argc, char **argv)
+{
+	int beacon, bpf, daemon, rbufsize, period;
+	char ch, *device;
+
+	/* option defaults */
+	beacon = 1;
+	daemon = 1;
+	period = 60;
+	device = "ekiss0";
+
+	while ((ch = getopt(argc, argv, "i:p:Dn")) != -1) {
+		switch (ch) {
+		case 'i':
+			device = optarg;
+			break;
+		case 'p':
+			period = atoi(optarg);
+			break;
+		case 'D':
+			daemon = 0;
+			break;
+		case 'n':
+			beacon = 0;
+			break;
+		default:
+			usage();
+			break;
+		}
+	}
+	argc -= optind;
+	argv += optind;
+
+	char *call = read_mycallsign();
+
+	/* Check for root privileges. */
+	if (geteuid())
+		fatal("need root privileges");
+
+	if (daemon)
+		daemonize();
+
+	/* This will not return if it fails. */
+	bpf = iclc_open(device);
+
+	/* Get buffer size needed for reads */
+	if (ioctl(bpf, BIOCGBLEN, (caddr_t)&rbufsize) == -1)
+		fatal("failed to get buffer size for bpf reads");
+
+	unveil("/var/db/heard", "cw");
+	pledge("stdio cpath wpath", NULL);
+
+	pthread_t beacon_thread;
+	if (beacon) {
+		struct iclc_beacon_attrs *beacon_attrs = malloc(sizeof(struct iclc_beacon_attrs));
+		beacon_attrs->call = call;
+		beacon_attrs->device = device;
+		beacon_attrs->bpf = bpf;
+		beacon_attrs->period = period;
+		pthread_create(&beacon_thread, NULL, iclc_beacon_loop, beacon_attrs);
+	}
+
+	iclc_listen_loop(bpf, rbufsize); /* blocks forever */
+
+	/* XXX: unreachable code, needs to go in signal handler? */
+	return pthread_join(beacon_thread, NULL);
+}
Index: src/usr.sbin/iclcd/iclc.h
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/iclc.h
@@ -0,0 +1,26 @@
+
+#define ICLC_IDENT_QRT 1
+
+#define ICLC_MAXCALL 42
+
+struct iclc_ident_frame_hdr {
+	struct ether_addr	fr_dhost;
+	struct ether_addr	fr_shost;
+	u_int16_t		fr_et;
+	u_int8_t		fr_subtype;
+	u_int8_t		fr_version;
+	u_int8_t		fr_flags;
+	u_int8_t		fr_calllen;
+	u_int8_t		fr_call[ICLC_MAXCALL];
+};
+
+struct iclc_ident {
+	char			call[ICLC_MAXCALL];
+	struct ether_addr	hwaddr;
+	time_t			first_heard;
+	time_t			last_heard;
+	int			flags;
+	SLIST_ENTRY(iclc_ident)	entries;
+};
+SLIST_HEAD(iclc_idents_list, iclc_ident) iclc_idents;
+
Index: src/etc/rc.d/iclcd
===================================================================
--- /dev/null
+++ src/etc/rc.d/iclcd
@@ -0,0 +1,11 @@
+#!/bin/ksh
+#
+# $OpenBSD$
+
+daemon="/usr/sbin/iclcd"
+
+. /etc/rc.d/rc.subr
+
+rc_reload=NO
+
+rc_cmd $1
Index: src/etc/rc
===================================================================
--- src.orig/etc/rc
+++ src/etc/rc
@@ -584,7 +584,7 @@ start_daemon ldomd sshd switchd snmpd ld
 start_daemon relayd dhcpd dhcrelay mrouted dvmrpd radiusd eigrpd route6d
 start_daemon rad hostapd lpd smtpd slowcgi httpd ftpd
 start_daemon ftpproxy ftpproxy6 tftpd tftpproxy identd inetd rarpd bootparamd
-start_daemon rbootd mopd vmd spamd spamlogd sndiod
+start_daemon rbootd mopd vmd spamd spamlogd sndiod iclcd
 echo '.'
 
 # If rc.firsttime exists, run it just once, and make sure it is deleted.
Index: src/etc/rc.conf
===================================================================
--- src.orig/etc/rc.conf
+++ src/etc/rc.conf
@@ -27,6 +27,7 @@ ftpproxy6_flags=NO
 hostapd_flags=NO
 hotplugd_flags=NO
 httpd_flags=NO
+iclcd_flags=NO
 identd_flags=NO
 ifstated_flags=NO
 iked_flags=NO
Index: src/etc/Makefile
===================================================================
--- src.orig/etc/Makefile
+++ src/etc/Makefile
@@ -58,7 +58,7 @@ EXAMPLES_600=bgpd.conf doas.conf dvmrpd.
 
 # -r-xr-xr-x
 RCDAEMONS=amd apmd bgpd bootparamd cron dhcpd dhcrelay dhcrelay6 dvmrpd \
-	eigrpd ftpd ftpproxy ftpproxy6 hostapd hotplugd httpd identd ifstated \
+	eigrpd ftpd ftpproxy ftpproxy6 hostapd hotplugd httpd iclcd identd ifstated \
 	iked inetd isakmpd iscsid ldapd ldattach ldomd ldpd lockd \
 	lpd mopd mountd mrouted nfsd npppd nsd ntpd ospf6d ospfd \
 	pflogd portmap rad radiusd rarpd rbootd rebound relayd ripd route6d \
Index: src/usr.sbin/Makefile
===================================================================
--- src.orig/usr.sbin/Makefile
+++ src/usr.sbin/Makefile
@@ -5,7 +5,7 @@
 SUBDIR=	ac accton acme-client acpidump adduser amd apm apmd arp \
 	authpf bgpctl bgpd bind chroot config cron crunchgen dev_mkdb \
 	dhcpd dhcrelay dhcrelay6 dvmrpctl dvmrpd edquota eeprom eigrpd eigrpctl \
-	fdformat ftp-proxy gpioctl hostapd hostctl hotplugd httpd identd \
+	fdformat ftp-proxy gpioctl hostapd hostctl hotplugd httpd iclcd identd \
 	ifstated ikectl inetd installboot iostat iscsictl iscsid kgmon \
 	kvm_mkdb ldapd ldapctl ldomctl ldomd ldpd ldpctl lpr makefs \
 	mailwrapper map-mbone memconfig mksuncd mkuboot mopd mrinfo \
Index: src/distrib/sets/lists/base/mi
===================================================================
--- src.orig/distrib/sets/lists/base/mi
+++ src/distrib/sets/lists/base/mi
@@ -154,6 +154,7 @@
 ./etc/rc.d/hostapd
 ./etc/rc.d/hotplugd
 ./etc/rc.d/httpd
+./etc/rc.d/iclcd
 ./etc/rc.d/identd
 ./etc/rc.d/ifstated
 ./etc/rc.d/iked
@@ -2512,6 +2513,7 @@
 ./usr/sbin/host
 ./usr/sbin/hostapd
 ./usr/sbin/httpd
+./usr/sbin/iclcd
 ./usr/sbin/identd
 ./usr/sbin/ifstated
 ./usr/sbin/ikectl
Index: src/distrib/sets/lists/man/mi
===================================================================
--- src.orig/distrib/sets/lists/man/mi
+++ src/distrib/sets/lists/man/mi
@@ -2327,6 +2327,7 @@
 ./usr/share/man/man8/i386/memconfig.8
 ./usr/share/man/man8/i386/pxeboot.8
 ./usr/share/man/man8/i386/wsmoused.8
+./usr/share/man/man8/iclcd.8
 ./usr/share/man/man8/identd.8
 ./usr/share/man/man8/ifconfig.8
 ./usr/share/man/man8/ifstated.8
Index: src/usr.sbin/iclcd/heard.5
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/heard.5
@@ -0,0 +1,69 @@
+.Dd October 7, 2019
+.Dt HEARD 5
+.Os
+.Sh NAME
+.Nm heard
+.Nd heard stations database
+.Sh DESCRIPTION
+The
+.Nm
+file maps Ethernet addresses to call signs.
+The format is intended to be somewhat human readable to allow for debugging
+however this format should never be written or edited by a human.
+It is expected that this file will be maintained by
+.Xr iclcd 8 .
+.Pp
+Lines consist of the following fields:
+.Bl -item -offset indent -compact
+.It
+Ethernet address
+.It
+Station callsign
+.It
+Flags
+.It
+First heard timestamp
+.It
+Last heard timestamp
+.El
+.Pp
+Fields are seperated by a horizontal tab character (hex value 0x09) and lines
+are seperated by a newline character (hex value 0x0a).
+.Ss Field Details
+.Bl -tag -width Ds
+.It Ethernet address
+Ethernet addresses are expressed as six hexadecimal numbers separated by
+colons.
+The functions described in
+.Xr ether_aton 3
+can read and produce this format.
+.It Station callsign
+The station callsign does not have a fixed format and is treated as an
+opaque
+.Xr ascii 7
+string.
+It will only consist of printable characters and must contain at least
+one character, but no guarantees are made beyond this.
+.It Flags
+The station flags are expressed as a decimal number.
+The flags are described in
+.Xr hamdex 7 .
+.It First heard timestamp
+The time that the station was first heard is expressed as a decimal
+number of seconds since 0 hours, 0 minutes, 0 seconds, January 1, 1970,
+Coordinated Universal Time (UTC).
+.It Last heard timestamp
+The time that the station was last heard, expressed as above.
+.El
+.Sh FILES
+.Bl -tag -width /var/db/heard -compact
+.It Pa /var/db/heard
+.El
+.Sh SEE ALSO
+.Xr heard 1 ,
+.Xr iclcd 8
+.Sh AUTHORS
+The
+.Nm
+daemon was written for the HamBSD project by
+.An Iain R. Learmonth Aq Mt irl@fsfe.org
