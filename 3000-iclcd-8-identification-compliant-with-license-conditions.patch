Summary: iclcd(8): identify compliant with license conditions
---
Index: src/usr.sbin/iclcd/Makefile
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/Makefile
@@ -0,0 +1,9 @@
+#	$OpenBSD: Makefile,v 1.8 2015/03/11 14:59:04 deraadt Exp $
+
+PROG=	iclcd
+SRCS=	iclcd.c
+MAN=	iclcd.8
+
+LDADD=  -lpthread
+
+.include <bsd.prog.mk>
Index: src/usr.sbin/iclcd/iclcd.8
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/iclcd.8
@@ -0,0 +1,56 @@
+.Dd September 7 2019
+.Dt ICLCD 8
+.Os
+.Sh NAME
+.Nm iclcd
+.Nd identification compliant with license conditions daemon
+.Sh SYNOPSIS
+.Nm
+.Op Fl D
+.Op Fl i Ar interface
+.Op Fl p Ar period
+.Sh DESCRIPTION
+.Nm
+sends
+.Em hamdex
+identification frames using the contents of
+.Pa /etc/mycallsign
+up to either the first newline or to the end of the file.
+.Pp
+.Nm
+is usually started at boot time, and can be enabled by
+setting the following in
+.Pa /etc/rc.conf.local :
+.Pp
+.Dl iclcd_flags=\&"\&"
+.Pp
+See
+.Xr rc 8
+and
+.Xr rc.conf 8
+for more information on the boot process
+and enabling daemons.
+.Sh OPTIONS
+.Bl -tag -width Ds
+.It Fl D
+Do not daemonize.
+.It Fl i Ar interface
+Interface name to broadcast ident frames (default: ekiss0).
+.It Fl p Ar period
+Period in seconds between broadcasts (default: 60).
+.Sh DISCLAIMER
+This may not be enough to comply with your local laws regarding identification
+of amateur radio transmissions. This manual page is not legal advice.
+.Sh CAVEATS
+It is not currently possible to broadcast identification on multiple interfaces
+with a single instance. It is however possible to manually start multiple
+instances.
+.Sh SEE ALSO
+.Xr hamdex 7 ,
+.Xr mycallsign 5 ,
+.Xr kiss 4
+.Sh AUTHORS
+The
+.Nm
+daemon was written for the HamBSD project by Iain R. Learmonth for the public
+domain.
Index: src/usr.sbin/iclcd/iclcd.c
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/iclcd.c
@@ -0,0 +1,403 @@
+/*
+ * iclcd - intentification compliant with license conditions daemon
+ *
+ * Written by Iain R. Learmonth <irl@fsfe.org> for the public domain.
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <syslog.h>
+#include <stdarg.h>
+#include <signal.h>
+#include <pthread.h>
+#include <errno.h>
+#include <time.h>
+
+#include <sys/queue.h>
+#include <sys/times.h>
+#include <sys/time.h>
+#include <sys/ioctl.h>
+#include <net/bpf.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <netinet/in.h>
+#include <netinet/if_ether.h>
+
+#include "iclc.h"
+
+static __dead void	 fatal(char *);
+static __dead void	 usage(void);
+static void		 signal_handler(int sig);
+static char		*read_mycallsign(void);
+static int		 iclc_compose(char *, char *);
+static int		 iclc_open(char *);
+static void		 daemonize();
+static void		 format_mac();
+static void		 iclc_write_text_entry(FILE *, struct iclc_ident *);
+static void		 iclc_update(u_char *);
+static int		 iclc_verify(u_char *);
+static void		 iclc_listen_loop(int, int);
+static void		*iclc_beacon_loop(void *);
+
+struct iclc_beacon_attrs {
+	char	*call;   /* callsign as ascii text */
+	char	*device; /* interface name */
+	int	 bpf;    /* bpf file handle */
+	int	 period; /* beacon period */
+};
+
+static struct bpf_insn insns[] = {
+	/* Check EtherType */
+	BPF_STMT(BPF_LD | BPF_H | BPF_ABS, 12),
+	BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0x88B5, 0, 3),
+	/* Check HAMDEX SubType */
+	BPF_STMT(BPF_LD | BPF_B | BPF_ABS, 15),
+	BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, 0, 0, 1),
+	BPF_STMT(BPF_RET | BPF_K, (u_int)-1),
+	BPF_STMT(BPF_RET | BPF_K, 0),
+};
+
+static struct bpf_program filter = {
+	sizeof insns / sizeof(insns[0]),
+	insns
+};
+
+static __dead void
+fatal(char* msg)
+{
+	syslog(LOG_DAEMON | LOG_EMERG,
+	    "iclcd hit fatal error; you might want to turn off your radio");
+	syslog(LOG_DAEMON | LOG_ERR,
+	    "%s", msg);
+	exit(1);
+}
+
+static __dead void
+usage(void)
+{
+	extern char *__progname;
+
+	fprintf(stderr, "usage: %s [-D] [-i interface] [-p period]\n",
+	    __progname);
+	exit(1);
+}
+
+static void
+signal_handler(int sig)
+{
+	switch(sig) {
+	case SIGHUP:
+		syslog(LOG_DAEMON | LOG_INFO, "caught hangup signal");
+		break;
+	case SIGTERM:
+		syslog(LOG_DAEMON | LOG_EMERG,
+		    "caught terminate signal, shutting down");
+		exit(0);
+		break;
+	}
+}
+
+static char *
+read_mycallsign(void)
+{
+	FILE    *mcp;
+	char    *call, *nl;
+	size_t  callsize = 0;
+	ssize_t calllen;
+
+	call = NULL;
+
+	if ((mcp = fopen("/etc/mycallsign", "r")) == NULL)
+		fatal("could not open /etc/mycallsign");
+	if ((calllen = getline(&call, &callsize, mcp)) != -1) {
+		if ((nl = strchr(call, '\n')) != NULL)
+			nl[0] = '\0';
+		return call;
+	}
+	fatal("could not read callsign from /etc/mycallsign");
+}
+
+int
+iclc_compose(char *buf, char *call)
+{
+	int framelen, calllen;
+
+	const char header[] = {
+	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // broadcast destination
+	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // source filled by bpf
+	  0x88, 0xB5,                         // ethertype
+	  0x00,                               // subtype
+	  0x00                                // version
+	};
+
+	memcpy(buf, header, 16);
+	framelen = 16; // prefix is 15 bytes
+	calllen = strlcpy(&buf[16], call, 25);
+	if (calllen > 24) {
+		fatal("callsign in /etc/mycallsign too long");
+	}
+	framelen = framelen + calllen;
+	return framelen;
+}
+
+/*
+ * Open a BPF file and attach it to the interface named 'device'.
+ * Set immediate mode, check it is an Ethernet interface, and set a
+ * filter that only accepts iclc frames.
+ */
+int
+iclc_open(char *device)
+{
+	int bpf, immediate, iflen;
+	struct ifreq bound_if;
+	u_int dlt;
+
+	if ((bpf = open("/dev/bpf", O_RDWR)) == -1)
+		fatal("/dev/bpf failed to open");
+
+	/* Set immediate mode to process packets as they arrive. */
+	immediate = 1;
+	if (ioctl(bpf, BIOCIMMEDIATE, &immediate) == -1)
+		fatal("failed to set immediate mode");
+
+	/* Bind the network interface. */
+	iflen = strlen(device);
+	if (strlcpy(bound_if.ifr_name, device, sizeof(bound_if.ifr_name))
+	    < iflen)
+		fatal("interface name too long");
+	if(ioctl(bpf, BIOCSETIF, (caddr_t)&bound_if) == -1)
+		fatal("could not bind to interface");
+
+	/* Check the data link layer is Ethernet. */
+	if (ioctl(bpf, BIOCGDLT, (caddr_t)&dlt) == -1)
+		fatal("failed to get data link type");
+	if (dlt != DLT_EN10MB)
+		fatal("interface is not an ethernet");
+
+	/* Set filter program. */
+	if (ioctl(bpf, BIOCSETF, (caddr_t)&filter) == -1)
+		fatal("failed to set bpf filter");
+
+	return bpf;
+}
+
+static void
+daemonize()
+{
+	int i;
+	i = daemon(0, 0);
+	signal(SIGCHLD, SIG_IGN); /* ignore child */
+	signal(SIGTSTP, SIG_IGN); /* ignore tty signals */
+	signal(SIGTTOU, SIG_IGN);
+	signal(SIGTTIN, SIG_IGN);
+	signal(SIGHUP, signal_handler); /* catch hangup signal */
+	signal(SIGTERM, signal_handler); /* catch kill signal */
+}
+
+static void *
+iclc_beacon_loop(void *arguments)
+{
+	struct iclc_beacon_attrs *attrs = (struct iclc_beacon_attrs *)arguments;
+	char framebuf[41]; // extra byte for a terminating NUL, not txd
+	int framelen = iclc_compose(framebuf, attrs->call);
+	int unslept;
+
+	syslog(LOG_DAEMON | LOG_INFO,
+	    "started up beacon thread (interface %s, callsign: %s)", attrs->device, attrs->call);
+
+	for (;;) {
+		if (write(attrs->bpf, &framebuf, framelen) != framelen) {
+			syslog(LOG_DAEMON | LOG_EMERG,
+			    "failed to send ident frame, might want to unplug");
+			syslog(LOG_DAEMON | LOG_ERR,
+			    "failure reason: %m");
+		}
+		unslept = attrs->period;
+		while (unslept > 0)
+			unslept = sleep(unslept);
+	}
+}
+
+/*
+ * Formats a MAC address as a colon-seperated lowercase hex string.
+ * Callers must ensure the buffer is at least 18 bytes in size.
+ */
+static void
+format_mac(char *buf, struct ether_addr *eap)
+{
+	sprintf(buf, "%02x:%02x:%02x:%02x:%02x:%02x",
+	    eap->ether_addr_octet[0],
+	    eap->ether_addr_octet[1],
+	    eap->ether_addr_octet[2],
+	    eap->ether_addr_octet[3],
+	    eap->ether_addr_octet[4],
+	    eap->ether_addr_octet[5]);
+}
+
+static void
+iclc_write_text_entry(FILE* hh, struct iclc_ident *idp)
+{
+	char source_addr[18];
+	format_mac(source_addr, &idp->hwaddr);
+	if (fprintf(hh, "%s\t%s\t%d\t%lld\t%lld\n", source_addr, idp->call, idp->flags, idp->first_heard, idp->last_heard) != 0) {
+		/* TODO: log an error message */
+	}
+}
+
+/*
+ * Update the heard stations with data from received frame. This updates
+ * internal state and also the /var/db/heards.txt file.
+ */
+static void
+iclc_update(u_char *buf)
+{
+	struct ether_header *ep;
+	struct iclc_ident *idp;
+	FILE *hh;
+	char source_addr[18];
+	int updated = 0;
+
+	ep = (struct ether_header *)buf;
+	format_mac(source_addr, (struct ether_addr *)ep->ether_shost);
+
+	syslog(LOG_DAEMON | LOG_INFO, "updated callsign: %s from mac: %s",
+	    (char *)(&buf[16]),
+	    source_addr);
+
+	hh = fopen("/var/db/heards.txt", "w");
+	if (hh == NULL) {
+		fatal("error opening /var/db/heards.txt");
+	}
+
+	SLIST_FOREACH(idp, &iclc_idents, entries) {
+		if (!updated && memcmp(&idp->hwaddr, &ep->ether_shost, 6) == 0) {
+			strlcpy(idp->call, &buf[16], 40);
+			idp->last_heard = time(NULL);
+			updated = 1;
+		}
+		iclc_write_text_entry(hh, idp);
+	}
+
+	if (!updated) {
+		/* this one is new */
+		idp = malloc(sizeof(struct iclc_ident));
+		memcpy(&idp->hwaddr, ep->ether_shost, 6);
+		strlcpy(idp->call, &buf[16], 40);
+		idp->first_heard = idp->last_heard = time(NULL);
+		SLIST_INSERT_HEAD(&iclc_idents, idp, entries);
+		iclc_write_text_entry(hh, idp);
+	}
+
+	fclose(hh);
+}
+
+/*
+ * Verifies a packet looks sane and isn't going to be a trouble maker.
+ */
+static int
+iclc_verify(u_char *buf)
+{
+	if (buf[15] != 0) /* TODO: double check this offset */
+		return 0;
+	/* TODO: check chars are printable */
+	return 1;
+}
+
+static void
+iclc_listen_loop(int bpf, int rbufsize)
+{
+	int cc;
+	u_char *rbuf, *bp, *ep;
+
+	rbuf = malloc(rbufsize);
+	SLIST_INIT(&iclc_idents);
+
+	for (;;) {
+		cc = read(bpf, rbuf, rbufsize);
+		if (cc == -1 && errno == EINTR)
+			continue;
+		if (cc == -1)
+			fatal("read error");
+		bp = rbuf;
+		ep = bp + cc;
+		while (bp < ep) {
+#define caplen ((struct bpf_hdr *)bp)->bh_caplen
+#define hdrlen ((struct bpf_hdr *)bp)->bh_hdrlen
+			if (iclc_verify(bp+hdrlen))
+				iclc_update(bp + hdrlen);
+			bp += BPF_WORDALIGN(hdrlen + caplen);
+		}
+	}
+}
+
+int
+main(int argc, char **argv)
+{
+	int beacon, bpf, daemon, rbufsize, period;
+	char ch, *device;
+
+	/* option defaults */
+	beacon = 1;
+	daemon = 1;
+	period = 60;
+	device = "ekiss0";
+
+	while ((ch = getopt(argc, argv, "i:p:Dn")) != -1) {
+		switch (ch) {
+		case 'i':
+			device = optarg;
+			break;
+		case 'p':
+			period = atoi(optarg);
+			break;
+		case 'D':
+			daemon = 0;
+			break;
+		case 'n':
+			beacon = 0;
+			break;
+		default:
+			usage();
+			break;
+		}
+	}
+	argc -= optind;
+	argv += optind;
+
+	char *call = read_mycallsign();
+
+	/* Check for root privileges. */
+	if (geteuid())
+		fatal("need root privileges");
+
+	if (daemon)
+		daemonize();
+
+	/* This will not return if it fails. */
+	bpf = iclc_open(device);
+
+	/* Get buffer size needed for reads */
+	if (ioctl(bpf, BIOCGBLEN, (caddr_t)&rbufsize) == -1)
+		fatal("failed to get buffer size for bpf reads");
+
+	unveil("/var/db/heards.txt", "cw");
+	pledge("stdio cpath wpath", NULL);
+
+	pthread_t beacon_thread;
+	if (beacon) {
+		struct iclc_beacon_attrs *beacon_attrs = malloc(sizeof(struct iclc_beacon_attrs));
+		beacon_attrs->call = call;
+		beacon_attrs->device = device;
+		beacon_attrs->bpf = bpf;
+		beacon_attrs->period = period;
+		pthread_create(&beacon_thread, NULL, iclc_beacon_loop, beacon_attrs);
+	}
+
+	iclc_listen_loop(bpf, rbufsize); /* blocks forever */
+
+	/* TODO: unreachable code, needs to go in signal handler? */
+	return pthread_join(beacon_thread, NULL);
+}
Index: src/usr.sbin/iclcd/iclc.h
===================================================================
--- /dev/null
+++ src/usr.sbin/iclcd/iclc.h
@@ -0,0 +1,13 @@
+
+#define ICLC_IDENT_QRT 1
+
+struct iclc_ident {
+	char			call[40]; // TODO: magic numbers are bad
+	struct ether_addr	hwaddr;
+	time_t			first_heard;
+	time_t			last_heard;
+	int			flags;
+	SLIST_ENTRY(iclc_ident)	entries;
+};
+SLIST_HEAD(iclc_idents_list, iclc_ident) iclc_idents;
+
