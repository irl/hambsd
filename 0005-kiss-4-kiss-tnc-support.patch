From 76eb78290cb2a78200df717359fc91dc66ff855a Mon Sep 17 00:00:00 2001
From: "Iain R. Learmonth" <irl@fsfe.org>
Date: Tue, 17 Dec 2019 21:08:08 +0000
Subject: [PATCH 05/20] kiss(4): kiss tnc support

---
 distrib/sets/lists/comp/mi |   1 +
 distrib/sets/lists/man/mi  |   2 +
 share/man/man4/Makefile    |   4 +-
 share/man/man4/ekiss.4     |  82 +++++++++
 share/man/man4/kiss.4      | 118 +++++++++++++
 sys/conf/GENERIC           |   3 +
 sys/conf/files             |   6 +
 sys/kern/tty_conf.c        |   9 +
 sys/net/if_axkiss.c        | 286 ++++++++++++++++++++++++++++++++
 sys/net/if_ekiss.c         | 286 ++++++++++++++++++++++++++++++++
 sys/net/if_kiss.h          |  22 +++
 sys/net/kiss_tty.c         | 332 +++++++++++++++++++++++++++++++++++++
 sys/sys/tty.h              |   4 +
 sys/sys/ttycom.h           |   1 +
 14 files changed, 1154 insertions(+), 2 deletions(-)
 create mode 100644 share/man/man4/ekiss.4
 create mode 100644 share/man/man4/kiss.4
 create mode 100644 sys/net/if_axkiss.c
 create mode 100644 sys/net/if_ekiss.c
 create mode 100644 sys/net/if_kiss.h
 create mode 100644 sys/net/kiss_tty.c

diff --git a/distrib/sets/lists/comp/mi b/distrib/sets/lists/comp/mi
index 9c2fc521154..3f22bebd311 100644
--- a/distrib/sets/lists/comp/mi
+++ b/distrib/sets/lists/comp/mi
@@ -968,6 +968,7 @@
 ./usr/include/net/if_etherip.h
 ./usr/include/net/if_gif.h
 ./usr/include/net/if_gre.h
+./usr/include/net/if_kiss.h
 ./usr/include/net/if_llc.h
 ./usr/include/net/if_media.h
 ./usr/include/net/if_pflog.h
diff --git a/distrib/sets/lists/man/mi b/distrib/sets/lists/man/mi
index 65d4b314c00..a30e98a9a6c 100644
--- a/distrib/sets/lists/man/mi
+++ b/distrib/sets/lists/man/mi
@@ -1349,6 +1349,7 @@
 ./usr/share/man/man4/eg.4
 ./usr/share/man/man4/ehci.4
 ./usr/share/man/man4/eisa.4
+./usr/share/man/man4/ekiss.4
 ./usr/share/man/man4/el.4
 ./usr/share/man/man4/em.4
 ./usr/share/man/man4/emc.4
@@ -1521,6 +1522,7 @@
 ./usr/share/man/man4/kate.4
 ./usr/share/man/man4/kcov.4
 ./usr/share/man/man4/keynote.4
+./usr/share/man/man4/kiss.4
 ./usr/share/man/man4/km.4
 ./usr/share/man/man4/ksmn.4
 ./usr/share/man/man4/ksyms.4
diff --git a/share/man/man4/Makefile b/share/man/man4/Makefile
index 9d70964629a..e6aad1d99c4 100644
--- a/share/man/man4/Makefile
+++ b/share/man/man4/Makefile
@@ -25,7 +25,7 @@ MAN=	aac.4 abcrtc.4 ac97.4 acphy.4 acrtc.4 \
 	com.4 cue.4 cy.4 cz.4 \
 	dc.4 dcphy.4 ddb.4 de.4 diskmap.4 divert.4 dpt.4 drm.4 dwctwo.4 \
 	dwdog.4 dwge.4 dwiic.4 dwmmc.4 dwpcie.4 dwxe.4 \
-	eap.4 ec.4 eephy.4 ef.4 eg.4 ehci.4 eisa.4 el.4 em.4 emc.4 gcu.4 \
+	eap.4 ec.4 eephy.4 ef.4 eg.4 ehci.4 eisa.4 ekiss.4 el.4 em.4 emc.4 gcu.4 \
 	emu.4 enc.4 endrun.4 envy.4 eoip.4 ep.4 epic.4 esa.4 \
 	eso.4 ess.4 et.4 etherip.4 etphy.4 ex.4 exphy.4 exrtc.4 \
 	fanpwr.4 fd.4 fdc.4 fec.4 fido.4 fins.4 fintek.4 fms.4 fusbtc.4 fuse.4 \
@@ -41,7 +41,7 @@ MAN=	aac.4 abcrtc.4 ac97.4 acphy.4 acrtc.4 \
 	ip.4 ip6.4 ipcomp.4 ipgphy.4 ipmi.4 ips.4 ipsec.4 ipw.4 \
 	isa.4 isagpio.4 isapnp.4 islrtc.4 it.4 itherm.4 iwi.4 iwn.4 iwm.4 \
 	ix.4 ixgb.4 ixl.4 jmb.4 jme.4 jmphy.4 \
-	kate.4 kcov.4 km.4 ksmn.4 ksyms.4 kubsan.4 kue.4 lc.4 lge.4 lii.4 \
+	kate.4 kcov.4 kiss.4 km.4 ksmn.4 ksyms.4 kubsan.4 kue.4 lc.4 lge.4 lii.4 \
 	lisa.4 lm.4 lmenv.4 lmn.4 lmtemp.4 lo.4 lpt.4 lxtphy.4 luphy.4 \
 	maestro.4 mainbus.4 malo.4 maxds.4 maxrtc.4 maxtmp.4 mbg.4 \
 	mcprtc.4 mcx.4 midi.4 mii.4 mfi.4 \
diff --git a/share/man/man4/ekiss.4 b/share/man/man4/ekiss.4
new file mode 100644
index 00000000000..0dcef75a482
--- /dev/null
+++ b/share/man/man4/ekiss.4
@@ -0,0 +1,82 @@
+.\"	$OpenBSD$
+.\"
+.\" Copyright (c) 1983, 1991, 1993
+.\"	The Regents of the University of California.  All rights reserved.
+.\" Copyright (c) 2019 Iain R. Leamonth <irl@fsfe.org>
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\" 3. Neither the name of the University nor the names of its contributors
+.\"    may be used to endorse or promote products derived from this software
+.\"    without specific prior written permission.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\"     From:	@(#)lo.4	8.1 (Berkeley) 6/5/93
+.\"
+.Dd $Mdocdate: September 01 2019 $
+.Dt KISS 4
+.Os
+.Sh NAME
+.Nm ekiss
+.Nd Ethernet-over-KISS network interface
+.Sh SYNOPSIS
+.Cd "pseudo-device ekiss"
+.Sh DESCRIPTION
+The
+.Nm
+interface allows serial lines to be used as network interfaces using the
+.Em KISS protocol.
+.Pp
+A
+.Nm
+interface can be created at runtime using the
+.Ic ifconfig kiss Ns Ar N Ic create
+command or by setting up a
+.Xr hostname.if 5
+configuration file for
+.Xr netstart 8 .
+.Sh SEE ALSO
+.Xr inet 4 ,
+.Xr ldattach 8 ,
+.Xr hostname.if 5 ,
+.Xr ifconfig 8 ,
+.Xr netstart 8
+.Sh STANDARDS
+.Bl -bullet
+.It
+.Rs
+.%A Mike Chepponis, K3MC
+.%A Phil Karn, KA9Q
+.%D 1987
+.%T The KISS TNC: A simple Host-to-TNC communications protocol
+.%B ARRL 6th Computer Networking Conference
+.%C Redondo Beach, CA, United States.
+.Re
+.It
+.Rs
+.%A Karl Medcalf, WK5M
+.%D 1991
+.%T Multi-Drop KISS operation
+.%B ARRL 10th Computer Networking Conference
+.%C San Jose, CA, United States.
+.Re
+.El
+.Sh BUGS
+Currently, too many to enumerate. Look out for TODO: entries in the codebase.
diff --git a/share/man/man4/kiss.4 b/share/man/man4/kiss.4
new file mode 100644
index 00000000000..fe081620759
--- /dev/null
+++ b/share/man/man4/kiss.4
@@ -0,0 +1,118 @@
+.\"	$OpenBSD$
+.\"
+.\" Copyright (c) 1983, 1991, 1993
+.\"	The Regents of the University of California.  All rights reserved.
+.\" Copyright (c) 2019 Iain R. Leamonth <irl@fsfe.org>
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice, this list of conditions and the following disclaimer.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice, this list of conditions and the following disclaimer in the
+.\"    documentation and/or other materials provided with the distribution.
+.\" 3. Neither the name of the University nor the names of its contributors
+.\"    may be used to endorse or promote products derived from this software
+.\"    without specific prior written permission.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+.\" SUCH DAMAGE.
+.\"
+.\"     From:	@(#)lo.4	8.1 (Berkeley) 6/5/93
+.\"
+.Dd $Mdocdate: September 01 2019 $
+.Dt KISS 4
+.Os
+.Sh NAME
+.Nm kiss
+.Nd KISS line discipline
+.Sh SYNOPSIS
+.Cd "pseudo-device kiss"
+.Sh DESCRIPTION
+The
+.Nm
+line discipline can be attached to serial lines to communicate with a TNC,
+including the following:
+.Bl -bullet
+.It
+AEA PK-88
+.It
+Dire Wolf (using a
+.Xr pty 4 )
+.It
+Kenwood TM-D700E
+.El
+.Pp
+The TNC must already be in KISS mode before the line discipline is activated.
+Refer to the documentation for your TNC to find how to do this.
+It may be possible to perform automatic initialisation using a
+.Xr chat 8
+script.
+When this line discipline is first attached, it will in turn attach to the first
+available
+.Xr ekiss 4
+network interface, or any other interface that has registered with the line
+discipline.
+.Pp
+For general use, once the interface has been created and configured, the line
+discipline can be attached using
+.Xr ldattach 8 .
+For example, assuming the TNC is connected to
+.Pa /dev/cua00
+at 1200 baud:
+.Bd -literal
+$ ldattach -s 1200 kiss cua00
+.Ed
+.Pp
+The line discipline is also enabled by the following sequence:
+.Bd -literal -offset indent
+#include <sys/ioctl.h>
+int ldisc = KISSDISC, fd; ...
+ioctl(fd, TIOCSETD, &ldisc);
+.Ed
+.Pp
+Input and output on the serial line is then intercepted and handled by the
+kernel, and will not be available via the
+.Xr read 2
+and
+.Xr write 2
+system calls.
+.Sh MULTI-DROP KISS
+.Pp
+The line discipline is aware of multi-drop in as far as incoming data on all
+ports will be accepted and will not trigger error conditions. The
+additional commands, acknowledge or polled mode, are not implemented. All data
+will be sent on port 0.
+.Sh SEE ALSO
+.Xr tty 4 ,
+.Xr ldattach 8
+.Sh REFERENCES
+.Bl -bullet
+.It
+.Rs
+.%A Mike Chepponis, K3MC
+.%A Phil Karn, KA9Q
+.%D 1987
+.%T The KISS TNC: A simple Host-to-TNC communications protocol
+.%B ARRL 6th Computer Networking Conference
+.%C Redondo Beach, CA, United States.
+.Re
+.It
+.Rs
+.%A Karl Medcalf, WK5M
+.%D 1991
+.%T Multi-Drop KISS operation
+.%B ARRL 10th Computer Networking Conference
+.%C San Jose, CA, United States.
+.Re
+.El
diff --git a/sys/conf/GENERIC b/sys/conf/GENERIC
index 0b51e631222..3c54ba203a0 100644
--- a/sys/conf/GENERIC
+++ b/sys/conf/GENERIC
@@ -83,6 +83,7 @@ pseudo-device	msts	1	# MSTS line discipline
 pseudo-device	endrun	1	# EndRun line discipline
 pseudo-device	vnd	4	# vnode disk devices
 pseudo-device	ksyms	1	# kernel symbols device
+pseudo-device	kiss	1	# KISS TNC line discipline
 
 # clonable devices
 pseudo-device	bpfilter	# packet filter
@@ -109,6 +110,8 @@ pseudo-device	vether		# Virtual ethernet
 pseudo-device	vxlan		# Virtual extensible LAN
 pseudo-device	vlan		# IEEE 802.1Q VLAN
 pseudo-device	switch		# Switch
+pseudo-device	ekiss		# Ethernet-over-KISS
+pseudo-device	axkiss		# AX.25-over-KISS
 
 pseudo-device	bio	1	# ioctl multiplexing device
 
diff --git a/sys/conf/files b/sys/conf/files
index c921a4ecf1b..d110974326a 100644
--- a/sys/conf/files
+++ b/sys/conf/files
@@ -540,6 +540,7 @@ pseudo-device pty: tty
 pseudo-device nmea: tty
 pseudo-device msts: tty
 pseudo-device endrun: tty
+pseudo-device kiss: tty
 
 pseudo-device loop: ifnet
 pseudo-device pair: ifnet, ether
@@ -566,6 +567,8 @@ pseudo-device vether: ifnet, ether
 pseudo-device pppx: ifnet
 pseudo-device vxlan: ifnet, ether, ifmedia
 pseudo-device switch: ifnet, ether
+pseudo-device ekiss: ifnet
+pseudo-device axkiss: ifnet
 
 pseudo-device ksyms
 file	dev/ksyms.c			ksyms needs-flag
@@ -788,6 +791,9 @@ file net/if_ethersubr.c			ether			needs-flag
 file net/if_etherip.c			etherip			needs-flag
 file net/if_spppsubr.c			sppp
 file net/if_loop.c			loop
+file net/if_axkiss.c			axkiss
+file net/if_ekiss.c			ekiss
+file net/kiss_tty.c			kiss			needs-flag
 file net/if_media.c			ifmedia
 file net/if_ppp.c			ppp			needs-count
 file net/ppp_tty.c			ppp
diff --git a/sys/kern/tty_conf.c b/sys/kern/tty_conf.c
index 3ce329902c3..c75073b6bde 100644
--- a/sys/kern/tty_conf.c
+++ b/sys/kern/tty_conf.c
@@ -46,6 +46,7 @@
 #include "nmea.h"
 #include "msts.h"
 #include "endrun.h"
+#include "kiss.h"
 
 #define	ttynodisc ((int (*)(dev_t, struct tty *, struct proc *))enodev)
 #define	ttyerrclose ((int (*)(struct tty *, int flags, struct proc *))enodev)
@@ -108,6 +109,14 @@ struct	linesw linesw[] =
 	{ ttynodisc, ttyerrclose, ttyerrio, ttyerrio, nullioctl,
 	  ttyerrinput, ttyerrstart, nullmodem },
 #endif
+
+#if NKISS > 0
+	{ kissopen, kissclose, ttread, ttwrite, nullioctl,
+	  kissinput, ttstart, ttymodem },		/* 10- KISSDISC */
+#else
+	{ ttynodisc, ttyerrclose, ttyerrio, ttyerrio, nullioctl,
+	  ttyerrinput, ttyerrstart, nullmodem },
+#endif
 };
 
 int	nlinesw = sizeof (linesw) / sizeof (linesw[0]);
diff --git a/sys/net/if_axkiss.c b/sys/net/if_axkiss.c
new file mode 100644
index 00000000000..559e9faf763
--- /dev/null
+++ b/sys/net/if_axkiss.c
@@ -0,0 +1,286 @@
+/*	$OpenBSD$ */
+
+/*
+ * Copyright (c) 2019 Iain R. Learmonth <irl@fsfe.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/*
+ *  TODO:
+ *
+ * - Rename to axkiss, expecting a future axkiss interface.
+ * - Make sure that both axkiss and axkiss can share kiss(4) line disc.
+ * - This might mean not using the same software control block for both.
+ */
+
+/* A network interface using Ethernet over a KISS TNC. */
+
+#include <sys/param.h>
+#include <sys/kernel.h>
+#include <sys/malloc.h>
+#include <sys/mbuf.h>
+#include <sys/queue.h>
+#include <sys/socket.h>
+#include <sys/sockio.h>
+#include <sys/systm.h>
+#include <sys/syslog.h>
+#include <sys/rwlock.h>
+#include <sys/percpu.h>
+#include <sys/smr.h>
+#include <sys/task.h>
+
+#include <sys/tty.h>
+#include <sys/fcntl.h>
+
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/if_types.h>
+
+#include <net/if_media.h>
+
+#include <netinet/in.h>
+#include <netinet/if_ether.h>
+
+#include <netax25/if_ax25.h>
+#include <net/if_kiss.h>
+
+static int	axkiss_clone_create(struct if_clone *, int);
+static int	axkiss_clone_destroy(struct ifnet *);
+
+static int	axkiss_ioctl(struct ifnet *, u_long, caddr_t);
+static void	axkiss_start(struct ifqueue *);
+static int	axkiss_enqueue(struct ifnet *, struct mbuf *);
+
+static int	axkiss_media_change(struct ifnet *);
+static void	axkiss_media_status(struct ifnet *, struct ifmediareq *);
+
+static int	axkiss_up(struct ekiss_softc *);
+static int	axkiss_down(struct ekiss_softc *);
+static int	axkiss_iff(struct ekiss_softc *);
+
+static struct if_clone axkiss_cloner =
+    IF_CLONE_INITIALIZER("axkiss", axkiss_clone_create, axkiss_clone_destroy);
+
+void
+axkissattach(int count)
+{
+	if_clone_attach(&axkiss_cloner);
+}
+
+static int
+axkiss_clone_create(struct if_clone *ifc, int unit)
+{
+	struct ekiss_softc *sc;
+	struct ifnet *ifp;
+
+	sc = malloc(sizeof(*sc), M_DEVBUF, M_WAITOK|M_ZERO|M_CANFAIL);
+	if (sc == NULL)
+		return (ENOMEM);
+
+	ifp = &sc->sc_if;
+
+	snprintf(ifp->if_xname, sizeof(ifp->if_xname), "%s%d",
+	    ifc->ifc_name, unit);
+
+	ifmedia_init(&sc->sc_media, 0, axkiss_media_change, axkiss_media_status);
+	ifmedia_add(&sc->sc_media, IFM_ETHER | IFM_AUTO, 0, NULL);
+	ifmedia_set(&sc->sc_media, IFM_ETHER | IFM_AUTO);
+
+	ifp->if_softc = sc;
+	ifp->if_hardmtu = ETHER_MAX_HARDMTU_LEN;
+	ifp->if_ioctl = axkiss_ioctl;
+	ifp->if_qstart = axkiss_start;
+	ifp->if_enqueue = axkiss_enqueue;
+	ifp->if_flags = IFF_BROADCAST | IFF_MULTICAST | IFF_SIMPLEX;
+	ifp->if_xflags = IFXF_CLONED | IFXF_MPSAFE;
+	ifp->if_link_state = LINK_STATE_UP;
+	IFQ_SET_MAXLEN(&ifp->if_snd, IFQ_MAXLEN);
+
+	if_counters_alloc(ifp);
+	if_attach(ifp);
+	ax25_ifattach(ifp);
+
+	ifp->if_llprio = IFQ_MAXPRIO;
+
+	kissregister(sc);
+
+	return (0);
+}
+
+static int
+axkiss_clone_destroy(struct ifnet *ifp)
+{
+	struct ekiss_softc *sc = ifp->if_softc;
+
+	NET_LOCK();
+	sc->sc_dead = 1;
+
+	if (ISSET(ifp->if_flags, IFF_RUNNING))
+		axkiss_down(sc);
+	NET_UNLOCK();
+
+	ax25_ifdetach(ifp);
+	if_detach(ifp);
+	free(sc, M_DEVBUF, sizeof(*sc));
+
+	return (0);
+}
+
+static int
+axkiss_ioctl(struct ifnet *ifp, u_long cmd, caddr_t data)
+{
+	struct ekiss_softc *sc = ifp->if_softc;
+	struct ifreq *ifr = (struct ifreq *)data;
+	int error = 0;
+
+	if (sc->sc_dead)
+		return (ENXIO);
+
+	switch (cmd) {
+	case SIOCSIFADDR:
+		break;
+
+	case SIOCSIFFLAGS:
+		if (ISSET(ifp->if_flags, IFF_UP)) {
+			if (!ISSET(ifp->if_flags, IFF_RUNNING))
+				error = axkiss_up(sc);
+			else
+				error = ENETRESET;
+		} else {
+			if (ISSET(ifp->if_flags, IFF_RUNNING))
+				error = axkiss_down(sc);
+		}
+		break;
+
+	case SIOCSIFLLADDR:
+		error = EOPNOTSUPP;
+		//error = kiss_set_lladdr(sc, ifr);
+		break;
+
+	case SIOCSIFMTU:
+		error = EOPNOTSUPP;
+		//error = kiss_set_mtu(sc, ifr->ifr_mtu);
+		break;
+
+	case SIOCSIFMEDIA:
+		error = EOPNOTSUPP;
+		break;
+	case SIOCGIFMEDIA:
+		error = ifmedia_ioctl(ifp, ifr, &sc->sc_media, cmd);
+		break;
+
+	default:
+		error = EOPNOTSUPP;
+		//error = ether_ioctl(ifp, &sc->sc_ac, cmd, data);
+		break;
+	}
+
+	if (error == ENETRESET)
+		error = axkiss_iff(sc);
+
+	return (error);
+}
+
+static void
+axkiss_start(struct ifqueue *ifq)
+{
+	struct ifnet *ifp = ifq->ifq_if;
+	struct ekiss_softc *sc = ifp->if_softc;
+
+	smr_read_enter();
+	struct mbuf *m;
+	while ((m = ifq_dequeue(ifq)) != NULL)
+		kissoutput(sc, m);
+	smr_read_leave();
+}
+
+static int
+axkiss_enqueue(struct ifnet *ifp, struct mbuf *m)
+{
+	struct ekiss_softc *sc;
+	int error;
+
+	error = 0;
+
+	if (!ifq_is_priq(&ifp->if_snd))
+		return (if_enqueue_ifq(ifp, m));
+
+	/* if there's the wrong ldisc then abort */
+
+	sc = ifp->if_softc;
+
+	if (sc->sc_devp == NULL)
+		return (EINVAL);
+
+	counters_pkt(ifp->if_counters,
+	    ifc_opackets, ifc_obytes, m->m_pkthdr.len);
+
+	kissoutput(sc, m);
+
+	return (error);
+}
+
+static int
+axkiss_media_change(struct ifnet *ifp)
+{
+	return (EOPNOTSUPP);
+}
+
+static void
+axkiss_media_status(struct ifnet *ifp, struct ifmediareq *imr)
+{
+	//struct ekiss_softc *sc = ifp->if_softc;
+
+	imr->ifm_status = IFM_AVALID;
+	imr->ifm_active = IFM_ETHER | IFM_AUTO | IFM_ACTIVE;
+}
+
+static int
+axkiss_up(struct ekiss_softc *sc)
+{
+	struct ifnet *ifp = &sc->sc_if;
+
+	NET_ASSERT_LOCKED();
+	KASSERT(!ISSET(ifp->if_flags, IFF_RUNNING));
+
+	SET(ifp->if_flags, IFF_RUNNING);
+
+	return (ENETRESET);
+}
+
+static int
+axkiss_down(struct ekiss_softc *sc)
+{
+	struct ifnet *ifp = &sc->sc_if;
+
+	NET_ASSERT_LOCKED();
+	CLR(ifp->if_flags, IFF_RUNNING);
+
+	return (ENETRESET);
+}
+
+static int
+axkiss_iff(struct ekiss_softc *sc)
+{
+	struct ifnet *ifp = &sc->sc_if;
+	unsigned int promisc = ISSET(ifp->if_flags, IFF_PROMISC);
+
+	NET_ASSERT_LOCKED();
+
+	if (promisc != sc->sc_promisc) {
+		sc->sc_promisc = promisc;
+	}
+
+	return (0);
+}
diff --git a/sys/net/if_ekiss.c b/sys/net/if_ekiss.c
new file mode 100644
index 00000000000..80ed1132922
--- /dev/null
+++ b/sys/net/if_ekiss.c
@@ -0,0 +1,286 @@
+/*	$OpenBSD$ */
+
+/*
+ * Copyright (c) 2019 Iain R. Learmonth <irl@fsfe.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/*
+ *  TODO:
+ *
+ * - Rename to ekiss, expecting a future axkiss interface.
+ * - Make sure that both ekiss and axkiss can share kiss(4) line disc.
+ * - This might mean not using the same software control block for both.
+ */
+
+/* A network interface using Ethernet over a KISS TNC. */
+
+#include <sys/param.h>
+#include <sys/kernel.h>
+#include <sys/malloc.h>
+#include <sys/mbuf.h>
+#include <sys/queue.h>
+#include <sys/socket.h>
+#include <sys/sockio.h>
+#include <sys/systm.h>
+#include <sys/syslog.h>
+#include <sys/rwlock.h>
+#include <sys/percpu.h>
+#include <sys/smr.h>
+#include <sys/task.h>
+
+#include <sys/tty.h>
+#include <sys/fcntl.h>
+
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/if_types.h>
+
+#include <net/if_media.h>
+
+#include <netinet/in.h>
+#include <netinet/if_ether.h>
+
+#include <net/if_kiss.h>
+
+static int	ekiss_clone_create(struct if_clone *, int);
+static int	ekiss_clone_destroy(struct ifnet *);
+
+static int	ekiss_ioctl(struct ifnet *, u_long, caddr_t);
+static void	ekiss_start(struct ifqueue *);
+static int	ekiss_enqueue(struct ifnet *, struct mbuf *);
+
+static int	ekiss_media_change(struct ifnet *);
+static void	ekiss_media_status(struct ifnet *, struct ifmediareq *);
+
+static int	ekiss_up(struct ekiss_softc *);
+static int	ekiss_down(struct ekiss_softc *);
+static int	ekiss_iff(struct ekiss_softc *);
+
+static struct if_clone ekiss_cloner =
+    IF_CLONE_INITIALIZER("ekiss", ekiss_clone_create, ekiss_clone_destroy);
+
+void
+ekissattach(int count)
+{
+	if_clone_attach(&ekiss_cloner);
+}
+
+static int
+ekiss_clone_create(struct if_clone *ifc, int unit)
+{
+	struct ekiss_softc *sc;
+	struct ifnet *ifp;
+
+	sc = malloc(sizeof(*sc), M_DEVBUF, M_WAITOK|M_ZERO|M_CANFAIL);
+	if (sc == NULL)
+		return (ENOMEM);
+
+	ifp = &sc->sc_if;
+
+	snprintf(ifp->if_xname, sizeof(ifp->if_xname), "%s%d",
+	    ifc->ifc_name, unit);
+
+	ifmedia_init(&sc->sc_media, 0, ekiss_media_change, ekiss_media_status);
+	ifmedia_add(&sc->sc_media, IFM_ETHER | IFM_AUTO, 0, NULL);
+	ifmedia_set(&sc->sc_media, IFM_ETHER | IFM_AUTO);
+
+	ifp->if_softc = sc;
+	ifp->if_hardmtu = ETHER_MAX_HARDMTU_LEN;
+	ifp->if_ioctl = ekiss_ioctl;
+	ifp->if_qstart = ekiss_start;
+	ifp->if_enqueue = ekiss_enqueue;
+	ifp->if_flags = IFF_BROADCAST | IFF_MULTICAST | IFF_SIMPLEX;
+	ifp->if_xflags = IFXF_CLONED | IFXF_MPSAFE;
+	ifp->if_link_state = LINK_STATE_UP;
+	IFQ_SET_MAXLEN(&ifp->if_snd, IFQ_MAXLEN);
+	ether_fakeaddr(ifp);
+
+	if_counters_alloc(ifp);
+	if_attach(ifp);
+	ether_ifattach(ifp);
+
+	ifp->if_llprio = IFQ_MAXPRIO;
+
+	kissregister(sc);
+
+	return (0);
+}
+
+static int
+ekiss_clone_destroy(struct ifnet *ifp)
+{
+	struct ekiss_softc *sc = ifp->if_softc;
+
+	NET_LOCK();
+	sc->sc_dead = 1;
+
+	if (ISSET(ifp->if_flags, IFF_RUNNING))
+		ekiss_down(sc);
+	NET_UNLOCK();
+
+	ether_ifdetach(ifp);
+	if_detach(ifp);
+
+	free(sc, M_DEVBUF, sizeof(*sc));
+
+	return (0);
+}
+
+static int
+ekiss_ioctl(struct ifnet *ifp, u_long cmd, caddr_t data)
+{
+	struct ekiss_softc *sc = ifp->if_softc;
+	struct ifreq *ifr = (struct ifreq *)data;
+	int error = 0;
+
+	if (sc->sc_dead)
+		return (ENXIO);
+
+	switch (cmd) {
+	case SIOCSIFADDR:
+		break;
+
+	case SIOCSIFFLAGS:
+		if (ISSET(ifp->if_flags, IFF_UP)) {
+			if (!ISSET(ifp->if_flags, IFF_RUNNING))
+				error = ekiss_up(sc);
+			else
+				error = ENETRESET;
+		} else {
+			if (ISSET(ifp->if_flags, IFF_RUNNING))
+				error = ekiss_down(sc);
+		}
+		break;
+
+	case SIOCSIFLLADDR:
+		error = EOPNOTSUPP;
+		//error = kiss_set_lladdr(sc, ifr);
+		break;
+
+	case SIOCSIFMTU:
+		error = EOPNOTSUPP;
+		//error = kiss_set_mtu(sc, ifr->ifr_mtu);
+		break;
+
+	case SIOCSIFMEDIA:
+		error = EOPNOTSUPP;
+		break;
+	case SIOCGIFMEDIA:
+		error = ifmedia_ioctl(ifp, ifr, &sc->sc_media, cmd);
+		break;
+
+	default:
+		error = ether_ioctl(ifp, &sc->sc_ac, cmd, data);
+		break;
+	}
+
+	if (error == ENETRESET)
+		error = ekiss_iff(sc);
+
+	return (error);
+}
+
+static void
+ekiss_start(struct ifqueue *ifq)
+{
+	struct ifnet *ifp = ifq->ifq_if;
+	struct ekiss_softc *sc = ifp->if_softc;
+
+	smr_read_enter();
+	struct mbuf *m;
+	while ((m = ifq_dequeue(ifq)) != NULL)
+		kissoutput(sc, m);
+	smr_read_leave();
+}
+
+static int
+ekiss_enqueue(struct ifnet *ifp, struct mbuf *m)
+{
+	struct ekiss_softc *sc;
+	int error;
+
+	error = 0;
+
+	if (!ifq_is_priq(&ifp->if_snd))
+		return (if_enqueue_ifq(ifp, m));
+
+	/* if there's the wrong ldisc then abort */
+
+	sc = ifp->if_softc;
+
+	if (sc->sc_devp == NULL)
+		return (EINVAL);
+
+	counters_pkt(ifp->if_counters,
+	    ifc_opackets, ifc_obytes, m->m_pkthdr.len);
+
+	kissoutput(sc, m);
+
+	return (error);
+}
+
+static int
+ekiss_media_change(struct ifnet *ifp)
+{
+	return (EOPNOTSUPP);
+}
+
+static void
+ekiss_media_status(struct ifnet *ifp, struct ifmediareq *imr)
+{
+	//struct ekiss_softc *sc = ifp->if_softc;
+
+	imr->ifm_status = IFM_AVALID;
+	imr->ifm_active = IFM_ETHER | IFM_AUTO | IFM_ACTIVE;
+}
+
+static int
+ekiss_up(struct ekiss_softc *sc)
+{
+	struct ifnet *ifp = &sc->sc_if;
+
+	NET_ASSERT_LOCKED();
+	KASSERT(!ISSET(ifp->if_flags, IFF_RUNNING));
+
+	SET(ifp->if_flags, IFF_RUNNING);
+
+	return (ENETRESET);
+}
+
+static int
+ekiss_down(struct ekiss_softc *sc)
+{
+	struct ifnet *ifp = &sc->sc_if;
+
+	NET_ASSERT_LOCKED();
+	CLR(ifp->if_flags, IFF_RUNNING);
+
+	return (ENETRESET);
+}
+
+static int
+ekiss_iff(struct ekiss_softc *sc)
+{
+	struct ifnet *ifp = &sc->sc_if;
+	unsigned int promisc = ISSET(ifp->if_flags, IFF_PROMISC);
+
+	NET_ASSERT_LOCKED();
+
+	if (promisc != sc->sc_promisc) {
+		sc->sc_promisc = promisc;
+	}
+
+	return (0);
+}
diff --git a/sys/net/if_kiss.h b/sys/net/if_kiss.h
new file mode 100644
index 00000000000..9ba81558f73
--- /dev/null
+++ b/sys/net/if_kiss.h
@@ -0,0 +1,22 @@
+
+/* Structures and declarations for KISS. */
+
+#ifndef _NET_IF_KISS_H_
+#define _NET_IF_KISS_H_
+
+struct ekiss_softc {
+	struct arpcom		 sc_ac;
+#define sc_if			 sc_ac.ac_if
+	unsigned int		 sc_dead;
+	unsigned int		 sc_promisc;
+	struct ifmedia		 sc_media;
+	void			*sc_devp; /* tty */
+	pid_t			sc_xfer; /* used in transferring unit */
+	LIST_ENTRY(ekiss_softc)	sc_list; /* all kiss interfaces */
+};
+
+struct ekiss_softc	*kissalloc(pid_t pid);
+void			 kissoutput(struct ekiss_softc *sc, struct mbuf *m);
+void			 kissregister(struct ekiss_softc *sc);
+
+#endif /* _NET_IF_KISS_H_ */
diff --git a/sys/net/kiss_tty.c b/sys/net/kiss_tty.c
new file mode 100644
index 00000000000..361399c50f1
--- /dev/null
+++ b/sys/net/kiss_tty.c
@@ -0,0 +1,332 @@
+/*	$OpenBSD$ */
+
+/*
+ * Copyright (c) 2006, 2007, 2008 Marc Balmer <mbalmer@openbsd.org>
+ * Copyright (c) 2019 Iain R. Learmonth <irl@fsfe.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+/*
+ *  TODO:
+ *
+ *  - Set the interface as running in kissopen (and not in kissclose)
+ *  - Count the number of input errors occuring
+ */
+
+/* A tty line discipline to communicate with a KISS terminal node controller. */
+
+#include "bpfilter.h"
+
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/malloc.h>
+#include <sys/tty.h>
+#include <sys/conf.h>
+#include <sys/proc.h>
+#include <sys/smr.h>
+
+#include <net/bpf.h>
+
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/if_types.h>
+
+#include <net/if_media.h>
+
+#include <netinet/in.h>
+#include <netinet/if_ether.h>
+
+#include <net/if_kiss.h>
+
+#ifdef KISS_DEBUG
+#define DPRINTFN(n, x)	do { if (kissdebug > (n)) printf x; } while (0)
+int kissdebug = 0;
+#else
+#define DPRINTFN(n, x)
+#endif
+#define DPRINTF(x)	DPRINTFN(0, x)
+
+#define KISSMAX		1512 /* chosen arbitrarily; TODO: do better */
+
+/* special characters */
+#define KISSFEND	0xC0 /* frame end */
+#define KISSFESC	0xDB /* frame escape */
+#define KISSTFEND	0xDC /* transposed frame end */
+#define KISSTFESC	0xDD /* transposed frame escape */
+
+/* commands */
+#define KISSCMD_DATA		0x00
+#define KISSCMD_TXDELAY		0x01 /* in 10 ms units */
+#define KISSCMD_PERSIST		0x02 /* used for CSMA */
+#define KISSCMD_SLOTTIME	0x03 /* in 10 ms units */
+#define KISSCMD_TXTAIL		0x04 /* in 10 ms units */
+#define KISSCMD_FULLDUPLEX	0x05 /* 0=half, anything else=full */
+#define KISSCMD_SETHARDWARE	0x06 /* this is not implemented anywhere here */
+#define KISSCMD_RETURN		0xFF /* on all ports */
+
+LIST_HEAD(, ekiss_softc) kiss_softc_list;
+
+int kiss_count, kiss_nxid;
+
+/* flags for (struct kiss)->sc_flags */
+#define KISSFLAG_NEW	1
+#define KISSFLAG_DATA	2
+#define KISSFLAG_ESCAPE	4
+
+/* software control block for kiss line discipline */
+struct kiss {
+	char			 ks_cbuf[KISSMAX];	/* reveive buffer */
+	int			 ks_flags;		/* async line flags; KISSFLAG_* */
+	int			 ks_id;			/* instance id */
+	int			 ks_port;		/* rcv from port */
+	int			 ks_pos;		/* rcv buf position */
+	struct ekiss_softc	*ks_netp;		/* interface sc */
+#define ks_devp			 ks_netp->sc_devp
+};
+
+void kissattach(int dummy) {
+	/* noop */
+}
+
+/* take over a tty and match with a kiss net interface. */
+int
+kissopen(dev_t dev, struct tty *tp, struct proc *p)
+{
+	struct ekiss_softc *sc;
+	struct kiss *ks;
+	int error;
+
+	if (tp->t_line == KISSDISC)
+		return (ENODEV);
+	if ((error = suser(p)) != 0)
+		return (error);
+	if ((sc = kissalloc(p->p_p->ps_pid)) == NULL) {
+		/* most likely there are no kissN interfaces */
+		return ENXIO;
+	}
+	ks = malloc(sizeof(struct kiss), M_DEVBUF, M_WAITOK | M_ZERO);
+
+	ks->ks_id = kiss_nxid++;
+	kiss_count++;
+	ks->ks_netp = sc;
+	sc->sc_devp = (void*)tp;
+	tp->t_sc = (caddr_t)ks;
+
+	error = linesw[TTYDISC].l_open(dev, tp, p);
+	// TODO: do we really need to call this?
+	if (error) {
+		free(sc, M_DEVBUF, sizeof(*sc));
+		tp->t_sc = NULL;
+	}
+	return (error);
+}
+
+/* clean up and set the tty back to termios. */
+int
+kissclose(struct tty *tp, int flags, struct proc *p)
+{
+	struct kiss *ks = (struct kiss *)tp->t_sc;
+	ks->ks_devp = NULL;
+	free(ks, M_DEVBUF, sizeof(*ks));
+	tp->t_line = TTYDISC;	/* switch back to termios */
+	tp->t_sc = NULL;
+	kiss_count--;
+	if (kiss_count == 0)
+		kiss_nxid = 0;
+	return (linesw[TTYDISC].l_close(tp, flags, p));
+	// TODO: do we really need to call this?
+}
+
+/* tty input interrupt handler. collects kiss frames. */
+int
+kissinput(int c, struct tty *tp)
+{
+	struct kiss *ks = (struct kiss *)tp->t_sc;
+
+	if (c == KISSFEND) {
+		if (ks->ks_flags & KISSFLAG_DATA && ks->ks_pos > 14) {
+			struct mbuf *m = m_devget(ks->ks_cbuf, ks->ks_pos, 0);
+			if_vinput(&ks->ks_netp->sc_if, m);
+		}
+		ks->ks_flags = KISSFLAG_NEW;
+		return 0;
+	}
+
+	if (ks->ks_flags & KISSFLAG_NEW) {
+		/* this is the first byte in a new frame. */
+		int port = (c & 0xF0) >> 4;
+		int command = c & 0x0F;
+
+		ks->ks_flags = 0;
+
+		switch (command) {
+		case KISSCMD_DATA:
+			ks->ks_port = port;
+			ks->ks_pos = 0;
+			ks->ks_flags |= KISSFLAG_DATA;
+			break;
+		default:
+			printf("kiss: unrecognised command received on port %d\n", port);
+			break;
+		}
+		return 0;
+	}
+
+	if (c == KISSFESC) {
+		ks->ks_flags |= KISSFLAG_ESCAPE;
+		return 0;
+	}
+
+	if (ks->ks_flags & KISSFLAG_ESCAPE) {
+		int escaped = 0;
+		switch (c) {
+		case KISSTFESC:
+			escaped = KISSFESC;
+			break;
+		case KISSTFEND:
+			escaped = KISSFEND;
+			break;
+		}
+		if (escaped) {
+			c = escaped;
+		} else {
+			/* abort this packet. */
+			ks->ks_flags &= ~KISSFLAG_DATA;
+		}
+		ks->ks_flags &= ~KISSFLAG_ESCAPE;
+	}
+
+	if (ks->ks_flags & KISSFLAG_DATA) {
+		if (ks->ks_pos < (KISSMAX - 1)) {
+			ks->ks_cbuf[ks->ks_pos++] = c;
+		} else {
+			/* abort the packet. */
+			ks->ks_flags &= ~KISSFLAG_DATA;
+		}
+	}
+	return 0;
+}
+
+/* output a kiss frame with packet data from an mbuf. */
+void
+kissoutput(struct ekiss_softc *sc, struct mbuf *m) {
+	int s;
+	register u_char *cp;
+	struct tty *tp = (struct tty *)sc->sc_devp;
+#if NBPFILTER > 0
+	struct ifnet *ifp = &sc->sc_if;
+
+	if (ifp->if_bpf) {
+		if (bpf_mtap_ether(ifp->if_bpf, m, BPF_DIRECTION_OUT)) {
+			m_freem(m);
+			return;
+		}
+	}
+#endif
+
+	smr_read_enter(); // TODO: what is this protecting?
+	s = spltty();
+	putc(KISSFEND, &tp->t_outq);
+	putc(KISSCMD_DATA, &tp->t_outq); /* implicitly port 0 */
+
+	while (m) {
+		register u_char *ep;
+
+		cp = mtod(m, u_char *); ep = cp + m->m_len;
+		while (cp < ep) {
+			/*
+			 * Find out how many bytes in the string we can
+			 * handle without doing something special.
+			 */
+			register u_char *bp = cp;
+
+			while (cp < ep) {
+				switch (*cp++) {
+				case KISSFESC:
+				case KISSFEND:
+					--cp;
+					goto out;
+				}
+			}
+			out:
+			if (cp > bp) {
+				/*
+				 * Put n characters at once
+				 * into the tty output queue.
+				 */
+				if (b_to_q((char *)bp, cp - bp,
+				    &tp->t_outq))
+					break;
+				sc->sc_if.if_obytes += cp - bp;
+			}
+			/*
+			 * If there are characters left in the mbuf,
+			 * the first one must be special..
+			 * Put it out in a different form.
+			 */
+			if (cp < ep) {
+				if (putc(KISSFESC, &tp->t_outq))
+					break;
+				if (putc(*cp++ == KISSFESC ?
+				   KISSTFESC : KISSTFEND,
+				   &tp->t_outq)) {
+					(void) unputc(&tp->t_outq);
+					break;
+				}
+				sc->sc_if.if_obytes += 2;
+			}
+		}
+		m = m_free(m);
+	}
+
+	putc(KISSFEND, &tp->t_outq);
+	splx(s);
+	ttstart(tp);
+	smr_read_leave();
+}
+
+/* allocate the first available network interface. */
+struct ekiss_softc *
+kissalloc(pid_t pid)
+{
+	struct ekiss_softc *sc;
+
+	NET_LOCK();
+	LIST_FOREACH(sc, &kiss_softc_list, sc_list) {
+		if (sc->sc_xfer == pid) {
+			sc->sc_xfer = 0;
+			NET_UNLOCK();
+			return sc;
+		}
+	}
+	LIST_FOREACH(sc, &kiss_softc_list, sc_list) {
+		if (sc->sc_devp == NULL)
+			break;
+	}
+	NET_UNLOCK();
+	if (sc == NULL)
+		return NULL;
+
+	return sc;
+}
+
+/* register a kiss interface with the line discipline. */
+void
+kissregister(struct ekiss_softc *sc)
+{
+	NET_LOCK();
+	LIST_INSERT_HEAD(&kiss_softc_list, sc, sc_list);
+	NET_UNLOCK();
+}
+
diff --git a/sys/sys/tty.h b/sys/sys/tty.h
index efe0bfb24aa..01f6ec6fe64 100644
--- a/sys/sys/tty.h
+++ b/sys/sys/tty.h
@@ -333,4 +333,8 @@ int	endrunopen(dev_t, struct tty *, struct proc *);
 int	endrunclose(struct tty *, int, struct proc *);
 int	endruninput(int, struct tty *);
 
+int	kissopen(dev_t, struct tty *, struct proc *);
+int	kissclose(struct tty *, int, struct proc *);
+int	kissinput(int, struct tty *);
+
 #endif /* _KERNEL */
diff --git a/sys/sys/ttycom.h b/sys/sys/ttycom.h
index 82af7e8fba7..e297e837f73 100644
--- a/sys/sys/ttycom.h
+++ b/sys/sys/ttycom.h
@@ -147,5 +147,6 @@ struct tstamps {
 #define	NMEADISC	7		/* NMEA0183 discipline */
 #define	MSTSDISC	8		/* Meinberg time string discipline */
 #define	ENDRUNDISC	9		/* EndRun time format discipline */
+#define	KISSDISC	10		/* KISS TNC discipline */
 
 #endif /* !_SYS_TTYCOM_H_ */
-- 
2.24.1

