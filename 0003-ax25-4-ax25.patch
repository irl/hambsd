From 639e6152b973f7f688773377f451fca6bdc3ec99 Mon Sep 17 00:00:00 2001
From: "Iain R. Learmonth" <irl@fsfe.org>
Date: Tue, 17 Dec 2019 21:07:59 +0000
Subject: [PATCH 03/20] ax25(4): ax25

---
 distrib/sets/lists/comp/mi |   2 +
 include/Makefile           |   2 +-
 lib/libc/Symbols.list      |   2 +
 lib/libc/net/Makefile.inc  |   2 +-
 lib/libc/net/ax25.c        |  74 +++++++++++++++
 sys/conf/GENERIC           |   1 +
 sys/conf/files             |   3 +
 sys/kern/Makefile          |   2 +-
 sys/netax25/if_ax25.h      | 113 +++++++++++++++++++++++
 sys/netax25/if_ax25subr.c  | 183 +++++++++++++++++++++++++++++++++++++
 10 files changed, 381 insertions(+), 3 deletions(-)
 create mode 100644 lib/libc/net/ax25.c
 create mode 100644 sys/netax25/if_ax25.h
 create mode 100644 sys/netax25/if_ax25subr.c

diff --git a/distrib/sets/lists/comp/mi b/distrib/sets/lists/comp/mi
index ae506e330fc..9c2fc521154 100644
--- a/distrib/sets/lists/comp/mi
+++ b/distrib/sets/lists/comp/mi
@@ -1012,6 +1012,8 @@
 ./usr/include/net80211/ieee80211_regdomain.h
 ./usr/include/net80211/ieee80211_rssadapt.h
 ./usr/include/net80211/ieee80211_var.h
+./usr/include/netax25
+./usr/include/netax25/if_ax25.h
 ./usr/include/netdb.h
 ./usr/include/netgroup.h
 ./usr/include/netinet
diff --git a/include/Makefile b/include/Makefile
index 30d4f65cf7c..c8bfc5cddbc 100644
--- a/include/Makefile
+++ b/include/Makefile
@@ -35,7 +35,7 @@ MFILES=	frame.h
 LFILES=	endian.h fcntl.h syslog.h termios.h stdarg.h stdint.h varargs.h
 
 DIRS=	arpa protocols rpc rpcsvc
-LDIRS=	crypto ddb dev isofs miscfs msdosfs net netinet netinet6 \
+LDIRS=	crypto ddb dev isofs miscfs msdosfs net netax25 netinet netinet6 \
 	netmpls net80211 nfs ntfs scsi sys ufs uvm
 
 # Places that need a prerequisite target met before includes
diff --git a/lib/libc/Symbols.list b/lib/libc/Symbols.list
index f9aa62ab6e8..e7cacfba399 100644
--- a/lib/libc/Symbols.list
+++ b/lib/libc/Symbols.list
@@ -1092,6 +1092,8 @@ _res
 _res_ext
 _res_opcodes
 _res_resultcodes
+ax25_aton
+ax25_ntoa
 dn_expand
 endhostent
 endnetent
diff --git a/lib/libc/net/Makefile.inc b/lib/libc/net/Makefile.inc
index 41a3164d6a9..452b8b874e6 100644
--- a/lib/libc/net/Makefile.inc
+++ b/lib/libc/net/Makefile.inc
@@ -5,7 +5,7 @@
 
 CFLAGS+=-DRESOLVSORT
 
-SRCS+=	base64.c ethers.c freeaddrinfo.c \
+SRCS+=	ax25.c base64.c ethers.c freeaddrinfo.c \
 	gai_strerror.c getaddrinfo.c gethostnamadr.c \
 	getifaddrs.c getnameinfo.c getnetent.c \
 	getnetnamadr.c getpeereid.c getproto.c getprotoent.c getprotoname.c \
diff --git a/lib/libc/net/ax25.c b/lib/libc/net/ax25.c
new file mode 100644
index 00000000000..fb2c1ad98cf
--- /dev/null
+++ b/lib/libc/net/ax25.c
@@ -0,0 +1,74 @@
+#include <ctype.h>
+#include <string.h>
+#include <strings.h>
+#include <stdlib.h>
+#include <stdio.h>
+
+#include <sys/types.h>
+#include <netax25/if_ax25.h>
+
+/*
+ * Convert the network representation of an AX.25 address to a human readable
+ * callsign and SSID. This function is not thread safe, as it returns the
+ * result in a statically assigned buffer.
+ */
+char *
+ax25_ntoa(struct ax25_addr *axp)
+{
+	static char buf[10];
+	int i, ssid;
+	ssid = (axp->ax25_addr_octet[6] & AX25_SSID_MASK) >> 1;
+	bzero(buf, 10);
+	for (i = 0; i < 6; i++) {
+		if (axp->ax25_addr_octet[i] == 0x40)
+			break;
+		buf[i] = axp->ax25_addr_octet[i] >> 1;
+	}
+	if (ssid == 0) {
+		buf[i] = '\0';
+	} else {
+		snprintf(&buf[i], 10, "-%d", ssid);
+	}
+	return buf;
+}
+
+/*
+ * Convert a human readable callsign and SSID to the network representation of
+ * an AX.25 address. This function is not thread safe, as it returns the result
+ * in a statically assigned buffer.
+ */
+struct ax25_addr *
+ax25_aton(const char *s)
+{
+	static struct ax25_addr ax;
+	char ssid[3];
+	int i;
+	memcpy(&ax, "\x40\x40\x40\x40\x40\x40\x00", sizeof(struct ax25_addr));
+	for (i = 0; ; i++) {
+		if (s[i] == '\0') {
+			ax.ax25_addr_octet[6] = 0;
+			break;
+		}
+		if (s[i] == '-') {
+			if (isdigit(s[++i])) {
+				bzero(ssid, 3);
+				ssid[0] = s[i];
+				if (isdigit(s[++i]))
+					ssid[1] = s[i];
+				ax.ax25_addr_octet[6] = atoi(ssid) << 1;
+				if ((ax.ax25_addr_octet[6] & ~AX25_SSID_MASK) != 0) {
+					/* non AX.25 SSID */
+					return NULL;
+				}
+				break;
+			} else {
+				/* callsign is malformed */
+				return NULL;
+			}
+		}
+		ax.ax25_addr_octet[i] = toupper(s[i]) << 1;
+	}
+	ax.ax25_addr_octet[6] |= AX25_RESERVED_MASK;
+	return &ax;
+}
+
diff --git a/sys/conf/GENERIC b/sys/conf/GENERIC
index 92240cf0ab3..0b51e631222 100644
--- a/sys/conf/GENERIC
+++ b/sys/conf/GENERIC
@@ -56,6 +56,7 @@ option		PIPEX		# Ppp IP EXtension, for npppd
 option		MROUTING	# Multicast router
 option		MPLS		# Multi-Protocol Label Switching
 #option		BFD		# Bi-directional Forwarding Detection
+option		AX25		# AX.25
 
 #mpath0		at root		# SCSI Multipathing
 #scsibus*	at mpath?
diff --git a/sys/conf/files b/sys/conf/files
index 0cef7842919..c921a4ecf1b 100644
--- a/sys/conf/files
+++ b/sys/conf/files
@@ -1000,6 +1000,9 @@ file net/pfkeyv2.c			ipsec | tcp_signature
 file net/pfkeyv2_parsemessage.c		ipsec | tcp_signature
 file net/pfkeyv2_convert.c		ipsec | tcp_signature
 
+# AX25
+file netax25/if_ax25subr.c		ax25
+
 # libx86emu
 file dev/x86emu/x86emu.c		x86emu
 file dev/x86emu/x86emu_util.c		x86emu
diff --git a/sys/kern/Makefile b/sys/kern/Makefile
index d6aacd8a443..9ba0b4e5bdb 100644
--- a/sys/kern/Makefile
+++ b/sys/kern/Makefile
@@ -38,7 +38,7 @@ DGEN=	conf \
 	lib/libkern/arch/${MACHINE_ARCH} \
 	miscfs miscfs/deadfs miscfs/fifofs \
 	msdosfs \
-	net netinet netmpls \
+	net netax25 netinet netmpls \
 	nfs \
 	scsi \
 	sys \
diff --git a/sys/netax25/if_ax25.h b/sys/netax25/if_ax25.h
new file mode 100644
index 00000000000..bd4d50da562
--- /dev/null
+++ b/sys/netax25/if_ax25.h
@@ -0,0 +1,113 @@
+/*	$OpenBSD: if_ether.h,v 1.76 2019/07/17 16:46:18 mpi Exp $	*/
+/*	$NetBSD: if_ether.h,v 1.22 1996/05/11 13:00:00 mycroft Exp $	*/
+
+/*
+ * Copyright (c) 1982, 1986, 1993
+ *	The Regents of the University of California.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	@(#)if_ether.h	8.1 (Berkeley) 6/10/93
+ */
+
+#ifndef _NETINET_IF_AX25_H_
+#define _NETINET_IF_AX25_H_
+
+/*
+ * Some basic AX.25 constants.
+ */
+#define	AX25_ADDR_LEN		7	/* AX.25 address length			*/
+#define AX25_CNTL_LEN		1	/* AX.25 control field length		*/
+#define AX25_PID_LEN		1	/* AX.25 PID field length		*/
+#define AX25_MIN_HDR_LEN	((AX25_ADDR_LEN * 2) + AX25_CNTL_LEN + AX25_PID_LEN)
+#define AX25_MAX_HDR_LEN	((AX25_ADDR_LEN * 10) + AX25_CNTL_LEN + AX25_PID_LEN)
+#define AX25_MAX_DIGIS		8	/* Maximum number of digipeaters in path */
+#define AX25_MTU		576 + AX25_MAX_HDR_LEN	/* Default AX.25 interface MTU */
+/*
+ * The maximum supported AX.25 length and some space for encapsulation.
+ */
+#define AX25_MAX_HARDMTU_LEN	65435
+
+/*
+ * AX.25 address - 7 octets
+ */
+struct ax25_addr {
+	u_int8_t ax25_addr_octet[AX25_ADDR_LEN];
+};
+
+/*
+ * Bitmasks for final octet of address
+ */
+#define AX25_CR_MASK		0b10000000	/* Command/response bit */
+#define AX25_RESERVED_MASK	0b01100000	/* Reserved bits	*/
+#define AX25_SSID_MASK		0b00011110	/* SSID bits		*/
+#define AX25_LAST_MASK		0b00000001	/* Final address bit	*/
+
+//#include <netax25/protocols.h>
+
+#define	AX25_IS_BROADCAST(addr) \
+	(((addr)[0] == "Q" << 1 & (addr)[1] == "S" << 1 & \
+	  (addr)[2] == "T" << 1 & (addr)[3] == " " << 1 & \
+	  (addr)[4] == " " << 1 & (addr)[5] == " " << 1 & \
+	  (addr)[6] == 0))
+#define	AX25_IS_ANYADDR(addr)		\
+	(((addr)[0] == "A" << 1 & (addr)[1] == "N" << 1 & \
+	  (addr)[2] == "Y" << 1 & (addr)[3] == " " << 1 & \
+	  (addr)[4] == " " << 1 & (addr)[5] == " " << 1 & \
+	  (addr)[6] == 0))
+#define	AX25_IS_EQ(a1, a2)	(memcmp((a1), (a2), AX25_ADDR_LEN) == 0)
+
+#ifdef _KERNEL
+
+#include <net/if_var.h>	/* for "struct ifnet" */
+
+extern u_int8_t ax25broadcastaddr[AX25_ADDR_LEN];
+extern u_int8_t ax25anyaddr[AX25_ADDR_LEN];
+extern u_int8_t ax25nulladdr[AX25_ADDR_LEN];
+
+void	ax25_ifattach(struct ifnet *);
+void	ax25_ifdetach(struct ifnet *);
+int	ax25_input(struct ifnet *, struct mbuf *, void *);
+struct mbuf *
+	ax25_encap(struct ifnet *, struct mbuf *, struct sockaddr *,
+	    struct rtentry *, int *);
+int	ax25_output(struct ifnet *, struct mbuf *, struct sockaddr *,
+	    struct rtentry *);
+char	*ax25_sprintf(u_char *);
+/*
+int	ax25_resolve(struct ifnet *, struct mbuf *, struct sockaddr *,
+	    struct rtentry *, struct ax25_header *);
+int	ax25_ioctl(struct ifnet *, struct arpcom *, u_long, caddr_t);
+*/
+
+#else /* _KERNEL */
+
+__BEGIN_DECLS
+char *ax25_ntoa(struct ax25_addr *);
+struct ax25_addr *ax25_aton(const char *);
+__END_DECLS
+
+#endif /* _KERNEL */
+#endif /* _NETINET_IF_AX25_H_ */
diff --git a/sys/netax25/if_ax25subr.c b/sys/netax25/if_ax25subr.c
new file mode 100644
index 00000000000..5f30ac68dbc
--- /dev/null
+++ b/sys/netax25/if_ax25subr.c
@@ -0,0 +1,183 @@
+
+#include "bpfilter.h"
+
+#include <sys/errno.h>
+#include <sys/types.h>
+#include <sys/systm.h>
+#include <sys/malloc.h>
+#include <sys/mbuf.h>
+#include <sys/socket.h>
+
+#include <net/bpf.h>
+#include <net/if.h>
+#include <net/if_dl.h>
+#include <net/if_types.h>
+#include <netax25/if_ax25.h>
+
+u_int8_t ax25broadcastaddr[AX25_ADDR_LEN] =
+    { 'Q' << 1, 'S' << 1, 'T' << 1, ' ' << 1, ' ' << 1, ' ' << 1, 0 };
+u_int8_t ax25anyaddr[AX25_ADDR_LEN] =
+    { 'A' << 1, 'N' << 1, 'Y' << 1, ' ' << 1, ' ' << 1, ' ' << 1, 0 };
+u_int8_t ax25nulladdr[AX25_ADDR_LEN] =
+    { 'N' << 1, '0' << 1, 'C' << 1, 'A' << 1, 'L' << 1, 'L' << 1, 0 };
+#define senderr(e) { error = e; goto bad; }
+
+struct ax25_header {
+	struct ax25_addr ax25_dhost;
+	struct ax25_addr ax25_shost;
+};
+
+/*
+ * Process a received AX.25 frame.
+ */
+int
+ax25_input(struct ifnet *ifp, struct mbuf *m, void *cookie)
+{
+	/* Drop short frames */
+	if (m->m_len < AX25_MIN_HDR_LEN)
+		goto dropanyway;
+
+	/* TODO: do something with the packet in the future */
+
+dropanyway:
+	m_freem(m);
+	return 1;
+}
+
+/*
+ * Create a simple (and incomplete) AX.25 header.
+ */
+int
+ax25_resolve(struct ifnet *ifp, struct mbuf *m, struct sockaddr *dst,
+    struct rtentry *rt, struct ax25_header *ah)
+{
+	int error = 0;
+	sa_family_t af = dst->sa_family;
+
+	switch (af) {
+	case pseudo_AF_HDRCMPLT:
+		/* take the src and dst from the sa */
+		memcpy(ah, dst->sa_data, sizeof(*ah));
+		return 0;
+	case AF_UNSPEC:
+		/* take the dst from the sa, but get src below */
+		memcpy(ah, dst->sa_data, sizeof(*ah));
+		break;
+	default:
+		printf("%s: can't handle af%d\n", ifp->if_xname, af);
+		senderr(EAFNOSUPPORT);
+	}
+
+	memcpy(&ah->ax25_shost, LLADDR(ifp->if_sadl), ifp->if_addrlen);
+
+	return 0;
+
+bad:
+	m_freem(m);
+	return error;
+}
+
+struct mbuf *
+ax25_encap(struct ifnet *ifp, struct mbuf *m, struct sockaddr *dst,
+    struct rtentry *rt, int *errorp)
+{
+	struct ax25_header ah;
+	int error;
+
+	error = ax25_resolve(ifp, m, dst, rt, &ah);
+	switch (error) {
+	case 0:
+		break;
+	case EAGAIN:
+		error = 0;
+	default:
+		*errorp = error;
+		return NULL;
+	}
+
+	return m;
+
+	m = m_prepend(m, sizeof(struct ax25_header), M_DONTWAIT);
+	if (m == NULL) {
+		*errorp = ENOBUFS;
+		return NULL;
+	}
+
+	memcpy(mtod(m, struct ax25_header *), &ah, sizeof(struct ax25_header));
+
+	return m;
+}
+
+/*
+ * Encapsulate and output an AX.25 frame.
+ */
+int
+ax25_output(struct ifnet *ifp, struct mbuf *m, struct sockaddr *dst,
+    struct rtentry *rt)
+{
+	int error;
+	m = ax25_encap(ifp, m, dst, rt, &error);
+	if (m == NULL)
+		return error;
+	return if_enqueue(ifp, m);
+}
+
+/*
+ * Perform common duties while attaching to interface list.
+ */
+void
+ax25_ifattach(struct ifnet *ifp)
+{
+	ifp->if_type = IFT_AX25;
+	ifp->if_addrlen = AX25_ADDR_LEN;
+	ifp->if_hdrlen = AX25_MIN_HDR_LEN;
+	ifp->if_mtu = AX25_MTU;
+	ifp->if_output = ax25_output;
+
+	if_ih_insert(ifp, ax25_input, NULL);
+
+	if (ifp->if_hardmtu == 0) {
+		ifp->if_hardmtu = AX25_MTU;
+	}
+
+	if_alloc_sadl(ifp);
+	memcpy(LLADDR(ifp->if_sadl), ax25nulladdr, ifp->if_addrlen);
+
+#if NBPFILTER > 0
+	bpfattach(&ifp->if_bpf, ifp, DLT_AX25, sizeof(struct ax25_header));
+#endif
+}
+
+/*
+ * Perform common duties while detaching from the interface list.
+ */
+void
+ax25_ifdetach(struct ifnet *ifp)
+{
+	if_deactivate(ifp);
+
+	if_ih_remove(ifp, ax25_input, NULL);
+
+	KASSERT(SRPL_EMPTY_LOCKED(&ifp->if_inputs));
+}
+
+/*
+ * Convert AX25 address to printable (loggable) representation.
+ */
+char *
+ax25_sprintf(u_char *ap)
+{
+	int i, ssid;
+	static char ax25buf[AX25_ADDR_LEN + 3];
+	char *cp = ax25buf;
+	for (i = 0; i < AX25_ADDR_LEN - 1; i++) {
+		*cp++ = *ap++ >> 1;
+	}
+	*cp++ = '-';
+	ssid = *ap >> 1;
+	if (ssid > 9) {
+		*cp++ = '1';
+	}
+	*cp++ = '0' + (ssid % 10);
+	return ax25buf;
+}
-- 
2.24.1

