From bed7a65a1b2a5efd7d80d9716ef7316a9f293b96 Mon Sep 17 00:00:00 2001
From: "Iain R. Learmonth" <irl@fsfe.org>
Date: Tue, 17 Dec 2019 21:08:26 +0000
Subject: [PATCH 13/20] aprsisd(8): aprs-is daemon

---
 distrib/sets/lists/base/mi |   1 +
 distrib/sets/lists/man/mi  |   1 +
 usr.sbin/Makefile          |   2 +-
 usr.sbin/aprsisd/Makefile  |   7 +
 usr.sbin/aprsisd/aprsisd.8 |  90 +++++++
 usr.sbin/aprsisd/aprsisd.c | 483 +++++++++++++++++++++++++++++++++++++
 6 files changed, 583 insertions(+), 1 deletion(-)
 create mode 100644 usr.sbin/aprsisd/Makefile
 create mode 100644 usr.sbin/aprsisd/aprsisd.8
 create mode 100644 usr.sbin/aprsisd/aprsisd.c

diff --git a/distrib/sets/lists/base/mi b/distrib/sets/lists/base/mi
index 0a99a64a6ce..79cbb0bc01b 100644
--- a/distrib/sets/lists/base/mi
+++ b/distrib/sets/lists/base/mi
@@ -2483,6 +2483,7 @@
 ./usr/sbin/amd
 ./usr/sbin/amq
 ./usr/sbin/aprsd
+./usr/sbin/aprsisd
 ./usr/sbin/arp
 ./usr/sbin/authpf
 ./usr/sbin/authpf-noip
diff --git a/distrib/sets/lists/man/mi b/distrib/sets/lists/man/mi
index 96b1d9794a4..20583ecbbeb 100644
--- a/distrib/sets/lists/man/mi
+++ b/distrib/sets/lists/man/mi
@@ -2262,6 +2262,7 @@
 ./usr/share/man/man8/amd64/wsmoused.8
 ./usr/share/man/man8/amq.8
 ./usr/share/man/man8/aprsd.8
+./usr/share/man/man8/aprsisd.8
 ./usr/share/man/man8/arm64/MAKEDEV.8
 ./usr/share/man/man8/arm64/apm.8
 ./usr/share/man/man8/arm64/apmd.8
diff --git a/usr.sbin/Makefile b/usr.sbin/Makefile
index a7f76f73800..3a080897d11 100644
--- a/usr.sbin/Makefile
+++ b/usr.sbin/Makefile
@@ -2,7 +2,7 @@
 
 .include <bsd.own.mk>
 
-SUBDIR=	ac accton acme-client acpidump adduser amd apm apmd aprsd arp \
+SUBDIR=	ac accton acme-client acpidump adduser amd apm apmd aprsd aprsisd arp \
 	authpf bgpctl bgpd bind chroot config cron crunchgen dev_mkdb \
 	dhcpd dhcrelay dhcrelay6 dvmrpctl dvmrpd edquota eeprom eigrpd eigrpctl \
 	fdformat ftp-proxy gpioctl hostapd hostctl hotplugd httpd iclcd identd \
diff --git a/usr.sbin/aprsisd/Makefile b/usr.sbin/aprsisd/Makefile
new file mode 100644
index 00000000000..2ff5f13aaed
--- /dev/null
+++ b/usr.sbin/aprsisd/Makefile
@@ -0,0 +1,7 @@
+#	$OpenBSD: Makefile,v 1.8 2015/03/11 14:59:04 deraadt Exp $
+
+PROG=	aprsisd
+SRCS=	aprsisd.c
+MAN=	aprsisd.8
+
+.include <bsd.prog.mk>
diff --git a/usr.sbin/aprsisd/aprsisd.8 b/usr.sbin/aprsisd/aprsisd.8
new file mode 100644
index 00000000000..1ede18a7393
--- /dev/null
+++ b/usr.sbin/aprsisd/aprsisd.8
@@ -0,0 +1,90 @@
+.Dd October 13, 2019
+.Dt APRSISD 8
+.Os
+.Sh NAME
+.Nm aprsisd
+.Nd APRS-IS daemon
+.Sh SYNOPSIS
+.Nm aprsisd
+.Op Fl D
+.Op Fl S Ar ssid
+.Op Fl i Ar axtapN
+.Op Fl p Ar passcode
+.Op Fl f Ar filter
+.Op Ar server Op Ar port
+.Sh DESCRIPTION
+APRS-IS is an Internet-based network which inter-connects various APRS radio
+networks throughout the world (and space).
+The
+.Nm
+daemon works together with the kernel
+.Xr axtap 4
+driver to establish a connection to an APRS-IS server and present it as a
+virtual network interface.
+.Nm
+can also authenticate to the server and set an optional filter.
+.Pp
+By default the callsign from
+.Xr mycallsign 5
+will be used.
+.Pp
+.Nm
+itself will not produce or consume packets.
+A separate application, for example
+.Xr aprsd 8 ,
+must be used for that purpose.
+.Sh OPTIONS
+.Bl -tag -width Ds
+.It Fl D
+Do not daemonize.
+.It Fl S Ar ssid
+Set the SSID for the interface.
+Combined with your callsign this must be
+unique in the network, which usually means globally unique.
+See
+.Xr aprs 7
+for commonly used SSIDs for different station types.
+The default SSID is 0 (zero).
+.It Fl i Ar axtapN
+Use a specific
+.Xr axtap 4
+interface.
+By default the first available interface will be used.
+This option is primarily useful when starting
+.Nm
+during
+.Xr netstart 8 .
+.It Fl p Ar passcode
+Set the passcode to be used for login to the server.
+Contact the software author if you do not know your passcode.
+By default the connection will be unverified, meaning that the connection will
+be receive only (upload to APRS-IS will be forbidden).
+.It Fl f Ar filter
+Set a filter to be used with the server.
+.It Ar server Op Ar port
+Set the server to connect to, optionally specifying the TCP port.
+By default the round-robin DNS name
+.Em rotate.aprs2.net
+is used with port 14580.
+The server may be specified by either: a DNS name, a dotted-quad IPv4 address
+or a colon-seperated IPv6 address.
+.El
+.Sh DIAGNOSTICS
+.Nm
+will send status information, warnings and errors to
+.Xr syslog 8
+using facility daemon and levels err, warn and info.
+.Sh SEE ALSO
+.Xr axtap 4 ,
+.Xr mycallsign 5 ,
+.Xr aprs 7 ,
+.Xr aprsd 8
+.Sh HISTORY
+.Nm
+first appeared in HamBSD XXX.
+.Sh AUTHORS
+The
+.Nm
+daemon was written for the HamBSD project by
+.An Iain R. Learmonth Aq Mt irl@fsfe.org
+for the public domain.
diff --git a/usr.sbin/aprsisd/aprsisd.c b/usr.sbin/aprsisd/aprsisd.c
new file mode 100644
index 00000000000..7eb62a0cc77
--- /dev/null
+++ b/usr.sbin/aprsisd/aprsisd.c
@@ -0,0 +1,483 @@
+
+#include <ctype.h>
+#include <err.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <netdb.h>
+#include <signal.h>
+#include <stdarg.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <syslog.h>
+#include <unistd.h>
+
+#include <sys/event.h>
+#include <sys/ioctl.h>
+#include <sys/limits.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <net/if.h>
+#include <net/if_tun.h>
+#include <netinet/in.h>
+#include <netinet/tcp.h>
+#include <arpa/inet.h>
+#include <netax25/if_ax25.h>
+
+/*
+ * Much of the APRS-IS protocol has been based on the details found at:
+ * http://www.aprs-is.net/Connecting.aspx
+ */
+
+#define TNC2_MAXLINE 512
+
+struct sockaddr_ax25 {
+	u_int8_t		sax_len;
+	sa_family_t		sax_family;
+	struct ax25_addr	sax_addr;
+	int8_t			sax_pathlen;
+	struct ax25_addr	sax_path[AX25_MAX_DIGIS];
+};
+
+int isd, tap;
+
+static __dead void usage(void);
+static void daemonize(void);
+static void signal_handler(int sig);
+static char *read_mycallsign(void);
+static char *aprsis_pass(char *);
+static int ax25_input(char *, int);
+static void ax25_output(char *, int);
+static char *tnc2_hdr_to_ax25(struct sockaddr_ax25 *, struct sockaddr_ax25 *, char *);
+static void tnc2_input(char *);
+static int tnc2_output(char *);
+static void aprsis_login_str(char *, char *, char *, char *, char *);
+static void aprsis_remote_open(char *, char *, char *, char *, char *, char *);
+static void aprsis_local_open(char *);
+static int aprsis_local_shuffle(char *, char *, int);
+static void aprsis_loop(void);
+int main(int, char **);
+
+static __dead void
+usage(void)
+{
+	extern char *__progname;
+
+	fprintf(stderr, "usage: %s [-D] [-S ssid] [-i axtapN] [-p passcode] [-f filter] [server [port]]\n",
+	    __progname);
+	exit(1);
+}
+
+static void
+signal_handler(int sig)
+{
+	switch (sig) {
+	case SIGHUP:
+		syslog(LOG_DAEMON | LOG_INFO, "caught hangup signal");
+		break;
+	case SIGTERM:
+		syslog(LOG_DAEMON | LOG_WARNING, "caught terminate signal, shutting down");
+		exit(0);
+		break;
+	}
+}
+
+static void
+daemonize(void)
+{
+	int i;
+	i = daemon(0, 0);
+	signal(SIGCHLD, SIG_IGN); /* ignore child */
+	signal(SIGTSTP, SIG_IGN); /* ignore tty signals */
+	signal(SIGTTOU, SIG_IGN);
+	signal(SIGTTIN, SIG_IGN);
+	signal(SIGHUP, signal_handler); /* catch hangup signal */
+	signal(SIGTERM, signal_handler); /* catch kill signal */
+}
+
+static char *
+read_mycallsign(void)
+{
+	FILE	*mcp;
+	char	*call, *nl;
+	size_t	 callsize = 0;
+	ssize_t	 calllen;
+
+	call = NULL;
+
+	if ((mcp = fopen("/etc/mycallsign", "r")) == NULL)
+		err(1, "fopen");
+	if ((calllen = getline(&call, &callsize, mcp)) != -1) {
+		if ((nl = strchr(call, '\n')) != NULL)
+			nl[0] = '\0';
+		return call;
+	}
+	err(1, "getline");
+}
+
+static char *
+aprsis_pass(char *call)
+{
+	static char pass[6];
+	char *cp, *ep;
+	int16_t hash;
+
+	cp = call;
+	if ((ep = strchr(call, '-')) == NULL)
+		ep = cp + strlen(call);
+	hash = 0x73e2;
+	while (cp < ep) {
+		hash ^= (toupper(*(cp++)) << 8);
+		if (cp < ep)
+			hash ^= (toupper(*(cp++)));
+	}
+	snprintf(pass, 6, "%d", hash);
+	return pass;
+}
+
+/*
+ * TODO: things get really messed up if the packet buf isn't null terminated!!!!
+ */
+static int
+ax25_input(char *pkt, int len)
+{
+	char dst[10], src[10], tl[TNC2_MAXLINE];
+	int dn;
+	strlcpy(dst, ax25_ntoa((struct ax25_addr *)&pkt[0]), 10);
+	strlcpy(src, ax25_ntoa((struct ax25_addr *)&pkt[7]), 10);
+	snprintf(tl, TNC2_MAXLINE, "%s>%s", src, dst);
+	for (dn = 0; dn < AX25_MAX_DIGIS; ++dn) {
+		if (pkt[(7 * (dn + 1)) + 6] & AX25_LAST_MASK)
+			break;
+		strlcat(tl, ",", TNC2_MAXLINE);
+		strlcat(tl, ax25_ntoa((struct ax25_addr *)&pkt[7 * (dn + 2)]), TNC2_MAXLINE);
+	}
+	strlcat(tl, ":", TNC2_MAXLINE);
+	strlcat(tl, &pkt[7 * (dn + 2) + 2], TNC2_MAXLINE);
+	strlcat(tl, "\n", TNC2_MAXLINE);
+	return tnc2_output(tl);
+}
+
+static void
+ax25_output(char *pkt, int len)
+{
+	if (write(tap, pkt, len) == -1)
+		err(1, "ax25_output: write");
+}
+
+static char *
+tnc2_hdr_to_ax25(struct sockaddr_ax25 *saddr, struct sockaddr_ax25 *daddr,
+    char *s)
+{
+	char as[10];
+	struct ax25_addr *addr;
+	int dn, h;
+	char *bp, *ep, *pp;
+
+	if ((pp = strchr(s, ':')) == NULL)
+		return NULL;
+	bp = ep = s;
+	for (dn = -2 ; ep != pp && dn < AX25_MAX_DIGIS ; dn++) {
+		for (ep = bp; ep < pp; ep++)
+			if (*ep == '>' || *ep == ',')
+				break;
+		bzero(as, 10);
+		if (ep - bp < 3 || ep - bp > 9)
+			return NULL;
+		memcpy(as, bp, ep - bp);
+		if ((h = (as[ep - bp - 1] == '*')))
+			as[ep - bp - 1] = '\0';
+		if ((addr = ax25_aton(as)) == NULL)
+			return NULL;
+		if (h)
+			saddr->sax_path[dn].ax25_addr_octet[6] |= AX25_CR_MASK;
+		switch (dn) {
+		case -2:
+			/* source address */
+			memcpy(&saddr->sax_addr, addr, sizeof(struct ax25_addr));
+			break;
+		case -1:
+			/* destination address */
+			memcpy(&daddr->sax_addr, addr, sizeof(struct ax25_addr));
+			daddr->sax_addr.ax25_addr_octet[6] |= AX25_CR_MASK;
+			break;
+		default:
+			/* digi path */
+			memcpy(&saddr->sax_path[dn], addr, sizeof(struct ax25_addr));
+			break;
+		}
+		bp = ep + 1;
+	}
+	if (dn == 0) {
+		saddr->sax_addr.ax25_addr_octet[6] |= AX25_LAST_MASK;
+	} else {
+		saddr->sax_path[dn - 1].ax25_addr_octet[6] |= AX25_LAST_MASK;
+	}
+	saddr->sax_pathlen = dn;
+	return pp + 1;
+}
+
+static void
+tnc2_input(char *s)
+{
+	char pkt[1024], *payload;
+	struct sockaddr_ax25 saddr, daddr;
+	int dn, len;
+	if ((payload = tnc2_hdr_to_ax25(&saddr, &daddr, s)) == NULL)
+		return;
+	memcpy(pkt, &daddr.sax_addr, sizeof(struct ax25_addr));
+	memcpy(&pkt[7], &saddr.sax_addr, sizeof(struct ax25_addr));
+	for (dn = 0; dn < saddr.sax_pathlen; dn++)
+		memcpy(&pkt[14 + (7 * dn)], &saddr.sax_path[dn], sizeof(struct ax25_addr));
+	pkt[14 + (7 * dn)] = 0x03;
+	pkt[15 + (7 * dn)] = 0xf0;
+	len = 16 + (7 * dn) + strlcpy(&pkt[16 + (7 * dn)], payload, 1024 - 16);
+	ax25_output(pkt, len);
+}
+
+static int
+tnc2_output(char *s)
+{
+	int len = strlen(s);
+	printf("snd: %s", s);
+	return write(isd, s, len);
+}
+
+static void *
+get_in_addr(struct sockaddr *sa)
+{
+	if (sa->sa_family == AF_INET)
+		return &(((struct sockaddr_in*)sa)->sin_addr);
+	return &(((struct sockaddr_in6*)sa)->sin6_addr);
+}
+
+static void
+aprsis_login_str(char *login, char *call, char *ssid, char *pass, char *filter)
+{
+	memset(login, 0, 512);
+	strlcpy(login, "user ", 512);
+	strlcat(login, call, 512);
+	if (strcmp(ssid, "0") != 0) {
+		strlcat(login, "-", 512);
+		strlcat(login, ssid, 512);
+	}
+	strlcat(login, " pass ", 512);
+	strlcat(login, pass, 512);
+	strlcat(login, " vers HamBSD-aprsisd 0.0-dev", 512);
+	if (filter != NULL) {
+		strlcat(login, " filter ", 512);
+		strlcat(login, filter, 512);
+	}
+	strlcat(login, "\n", 512);
+}
+
+static void
+aprsis_remote_open(char *server, char *port, char *call, char *ssid, char *pass,
+    char *filter)
+{
+	struct addrinfo hints, *servinfo, *p;
+	int nodelay, rv;
+	char *login, as[INET6_ADDRSTRLEN];
+
+	memset(&hints, 0, sizeof hints);
+	hints.ai_family = AF_UNSPEC;
+	hints.ai_socktype = SOCK_STREAM;
+
+	if ((rv = getaddrinfo(server, port, &hints, &servinfo)) != 0) {
+		syslog(LOG_DAEMON | LOG_ERR, "getaddrinfo: %s\n", gai_strerror(rv));
+		return;
+	}
+
+	for (p = servinfo; p != NULL; p = p->ai_next) {
+		if ((isd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
+			syslog(LOG_DAEMON | LOG_WARNING, "socket: %m");
+			continue;
+		}
+		if (connect(isd, p->ai_addr, p->ai_addrlen) == -1) {
+			close(isd);
+			syslog(LOG_DAEMON | LOG_WARNING, "connect: %m");
+			continue;
+		}
+		break;
+	}
+
+	if (p == NULL)
+		err(1, "connect");
+
+	nodelay = 1;
+	setsockopt(isd, IPPROTO_TCP, TCP_NODELAY, &nodelay, sizeof(nodelay));
+
+	inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr), as, sizeof(as));
+	syslog(LOG_DAEMON | LOG_INFO, "connected to %s", as);
+
+	freeaddrinfo(servinfo);
+
+	if (strcmp(pass, "please") == 0)
+		pass = aprsis_pass(call);
+	login = malloc(512);
+	aprsis_login_str(login, call, ssid, pass, filter);
+	if (write(isd, login, strlen(login)) == -1)
+		err(1, "write");
+
+	free(login);
+
+	syslog(LOG_INFO | LOG_DAEMON, "connected to %s", as);
+}
+
+static void
+aprsis_local_open(char *interface)
+{
+	struct tuninfo ti;
+	char ifpath[PATH_MAX];
+	int i;
+
+	if (interface != NULL) {
+		snprintf(ifpath, PATH_MAX, "/dev/%s", interface);
+		if ((tap = open(ifpath, O_RDWR)) == -1)
+			return;
+		ioctl(tap, TUNGIFINFO, &ti);
+		ti.flags = IFF_UP | IFF_POINTOPOINT;
+		ioctl(tap, TUNSIFINFO, &ti);
+		return;
+	}
+	for (i = 0; i < 100; i++) {
+		snprintf(ifpath, PATH_MAX, "/dev/axtap%d", i);
+		if ((tap = open(ifpath, O_RDWR)) == -1)
+			continue;
+		ioctl(tap, TUNGIFINFO, &ti);
+		ti.flags = IFF_UP | IFF_POINTOPOINT;
+		ioctl(tap, TUNSIFINFO, &ti);
+		return;
+	}
+}
+
+/*
+ * Once a newline is found in the buffer, swap the CRLF (or just LF)
+ * for NUL to terminate the string and pass it to tnc2_input. Any
+ * remaining data in the buffer gets shuffled to the front and the
+ * new position in the buffer is returned.
+ */
+static int
+aprsis_local_shuffle(char *buf, char *ep, int pos)
+{
+	int ei = ep - buf;
+	if (buf[ei - 1] == '\r')
+		buf[ei - 1] = '\0';
+	buf[ei++] = '\0'; /* move index to start of new packet */
+	printf("rcv: %s\n", buf);
+	if (ei > 10 && buf[0] != '#')
+		/* a reasonable minimum length and not in-band signalling */
+		tnc2_input(buf);
+	memmove(buf, &buf[ei], pos - ei);
+	pos -= ei;
+	return pos;
+}
+
+static void
+aprsis_loop(void)
+{
+	struct kevent chlist[2];
+	struct kevent evlist[2];
+	int evi, kq, l_nr, nev, r_pos, r_nr;
+	char r_buf[TNC2_MAXLINE], l_buf[1500], *r_ep;
+
+	r_pos = 0;
+	bzero(r_buf, TNC2_MAXLINE);
+	bzero(l_buf, 1500);
+
+	if ((kq = kqueue()) == -1)
+		err(1, "kqueue");
+
+	EV_SET(&chlist[0], isd, EVFILT_READ, EV_ADD | EV_ENABLE, 0, 0, 0);
+	EV_SET(&chlist[1], tap, EVFILT_READ, EV_ADD | EV_ENABLE, 0, 0, 0);
+
+	while ((nev = kevent(kq, chlist, 2, evlist, 2, NULL)) > 0) {
+		for (evi = 0; evi < nev; evi++) {
+			if (evlist[evi].ident == tap) {
+				if ((l_nr = read(tap, l_buf, 1500)) == -1 || l_nr == 0)
+					err(1, "read tap");
+				if (ax25_input(l_buf, l_nr) == -1)
+					return;
+				bzero(l_buf, 1500);
+			} else if (evlist[evi].ident == isd) {
+				if (((r_nr = read(isd, &r_buf[r_pos], TNC2_MAXLINE - r_pos)) == -1) || r_nr == 0) {
+					return;
+				}
+				r_pos += r_nr;
+				if ((r_ep = strchr(r_buf, '\n')) != NULL)
+					r_pos = aprsis_local_shuffle(r_buf, r_ep, r_pos);
+			}
+		}
+	}
+}
+
+int
+main(int argc, char **argv)
+{
+	char *call, ch, *filter, *interface, *pass, *port, *server, *ssid;
+	const char *errstr;
+	int daemon;
+
+	daemon = 1;
+	call = read_mycallsign();
+	ssid = "0";
+	pass = "-1";
+	filter = NULL;
+	interface = NULL;
+	server = "rotate.aprs2.net";
+	port = "14580";
+
+	while ((ch = getopt(argc, argv, "Di:S:p:f:")) != -1) {
+		switch (ch) {
+		case 'D':
+			daemon = 0;
+			break;
+		case 'i':
+			interface = optarg;
+			break;
+		case 'S':
+			strtonum(optarg, 0, 15, &errstr);
+			if (errstr) {
+				warnx("SSID is %s: %s", errstr, optarg);
+				usage();
+			}
+			ssid = optarg;
+			break;
+		case 'p':
+			pass = optarg;
+			break;
+		case 'f':
+			filter = optarg;
+			break;
+		default:
+			usage();
+		}
+	}
+	argc -= optind;
+	argv += optind;
+
+	if (argc > 0)
+		server = argv[0];
+	if (argc > 1)
+		port = argv[1];
+
+	aprsis_local_open(interface);
+	if (tap == -1)
+		err(1, "tap open");
+
+	if (daemon)
+		daemonize();
+
+	if (unveil(NULL, NULL) == -1)
+		err(1, "unveil");
+	if (pledge("stdio inet rpath dns", NULL) == -1)
+		err(1, "pledge");
+
+	for (;;) {
+		aprsis_remote_open(server, port, call, ssid, pass, filter);
+		aprsis_loop();
+		syslog(LOG_DAEMON | LOG_INFO, "reconnecting in 30 seconds...");
+		sleep(30);
+	}
+}
-- 
2.24.1

